<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/cs-blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/cs-blog/" rel="alternate" type="text/html" /><updated>2025-03-10T20:50:16+09:00</updated><id>http://localhost:4000/cs-blog/feed.xml</id><title type="html">sendol’s CS &amp;amp; Dev. Blog</title><subtitle>sendol&apos;s CS &amp; Dev. Blog</subtitle><author><name>sendol</name><email>sendol39@gmail.com</email></author><entry><title type="html">벡터로 두 선분의 교점 구하기</title><link href="http://localhost:4000/cs-blog/algorithm/%EB%B2%A1%ED%84%B0%EB%A1%9C-%EB%91%90-%EC%84%A0%EB%B6%84%EC%9D%98-%EA%B5%90%EC%A0%90-%EA%B5%AC%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="벡터로 두 선분의 교점 구하기" /><published>2025-03-10T00:00:00+09:00</published><updated>2025-03-10T00:00:00+09:00</updated><id>http://localhost:4000/cs-blog/algorithm/%EB%B2%A1%ED%84%B0%EB%A1%9C-%EB%91%90-%EC%84%A0%EB%B6%84%EC%9D%98-%EA%B5%90%EC%A0%90-%EA%B5%AC%ED%95%98%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/cs-blog/algorithm/%EB%B2%A1%ED%84%B0%EB%A1%9C-%EB%91%90-%EC%84%A0%EB%B6%84%EC%9D%98-%EA%B5%90%EC%A0%90-%EA%B5%AC%ED%95%98%EA%B8%B0/"><![CDATA[<p>애드혹과 케이스 워크 노가다를 통한 선분 교차 판정은 좀 더럽다. 벡터를 사용해서 케이스를 좀 더 깔끔하게 분류해 선분의 교점을 구해보자.</p>

<ul>
  <li>이 글에서는 편의상 원점과 점 $A$를 잇는 벡터 $\overrightarrow{OA}$를 $\overrightarrow{A}$로 표현한다.</li>
</ul>

<h2 id="요약">요약</h2>

<p>원리는 필요 없고 알고리즘만 갖다 쓸 거라면 이걸 그대로 구현하면 된다. 맨 아래에 실제로 작동하는 코드도 있다.</p>

<ul>
  <li>입력 - 두 선분 $\overline{P_0 P_1}$과 $\overline{Q_0 Q_1}$</li>
  <li>출력 - 두 선분의 교점이 있으면 그 교점을, 두 선분이 한 선분으로 겹치면 그 선분을 반환하며, 두 선분이 만나지 않으면 만나지 않는다고 판단한다.</li>
</ul>

<ol>
  <li>$u \leftarrow (\overrightarrow{P_0 P_1} \times \overrightarrow{Q_0 Q_1})$</li>
  <li>$u \ne 0$이라면,
    <ol>
      <li>$s \leftarrow (\overrightarrow{P_0 Q_0} \times \overrightarrow{Q_0 Q_1}) / u \qquad t \leftarrow (\overrightarrow{P_0 Q_0} \times \overrightarrow{P_0 P_1}) / u$</li>
      <li>$0 \le s \le 1$이고 $0 \le t \le 1$이면 두 선분은 $\overrightarrow{OP_0} + s\overrightarrow{P_0P_1}$에서 교차한다. 그렇지 않으면 교점이 없다.</li>
    </ol>
  </li>
  <li>그렇지 않다면,
    <ol>
      <li>$\overrightarrow{P_0 Q_0} \times \overrightarrow{Q_0 Q_1} = 0$, $\overrightarrow{P_0 Q_0} \times \overrightarrow{P_0 P_1} = 0$ 중 하나라도 거짓이면 교점이 없다.</li>
      <li>$A_0, \ A_1 \leftarrow \min(P_0, \ P_1), \ \max(P_0, \ P_1) \ B_0, \ B_1 \leftarrow \min(Q_0, \ Q_1), \ \max(Q_0, \ Q_1)$</li>
      <li>$L \leftarrow \max(A_0, \ B_0) \ R \leftarrow \min(A_1, \ B_1)$</li>
      <li>$L &lt; R$이면 선분 $LR$에서 겹치고, $L = R$이면 $L$이 교점이고, $L &gt; R$이면 교점이 없다. 이 대소비교는 좌표를 튜플로 두고 통째로 비교하는 것이다.</li>
    </ol>
  </li>
</ol>

<h2 id="배경-지식">배경 지식</h2>

<p>혹시 벡터에 대해 잘 모르는 상황이라면 <a href="https://zigui.tistory.com/34">이 글</a>을 읽고 오는 것을 추천한다. 고등학교 기하 수준의 배경 지식이 있다면 굳이 안 봐도 되긴 하는데, 선분 교차 판정뿐만 아니라 계산 기하 분야에서 자주 등장하는 알고리즘을 종합적으로 설명하고 있어서 한 번 보면 좋다.</p>

<p>두 벡터를 곱하는 방법 중 하나로 외적(cross product)가 있다. 두 평면벡터의 외적은 그냥 수 하나가 나오고, 다음과 같이 정의된다.</p>

\[(a_x, a_y) \times (b_x, b_y) = a_x b_y - a_y b_x\]

<p>외적의 성질은 다음과 같다.</p>

<ul>
  <li>벡터의 덧셈에 대해 결합법칙과 분배법칙을 만족한다.</li>
  <li>외적하는 두 벡터를 교환하면 부호가 반대가 된다. $(\vec{a} \times \vec{b} = - \vec{b} \times \vec{a})$</li>
  <li>평행한 두 벡터를 외적하면 $0$이 된다.
    <ul>
      <li>두 벡터의 외적이 $0$이 아니면 두 벡터는 평행하지 않다.</li>
      <li>같은 벡터를 외적하면 $0$이 된다. $(\vec{a} \times \vec{a} = 0)$.</li>
    </ul>
  </li>
</ul>

<p>한편, 두 점 $A$와 $B$를 양 끝점으로 하는 선분 위의 임의의 점 $X$는 다음과 같이 표현할 수 있다.</p>

\[\overrightarrow{X} = \overrightarrow{A} + s\overrightarrow{AB} \quad (0 \le s \le 1)\]

<p>풀어서 설명하면, 원점에서 점 $X$까지 가려면 일단 점 $A$까지 간 다음, 선분 $\overline{AB}$을 따라 이동하면 된다는 것이다. 선분은 점의 집합이기 때문에, 다르게 말하면 저 식이 선분 자체를 벡터로 표현한 것이라고 볼 수도 있다.</p>

<h2 id="알고리즘-구성">알고리즘 구성</h2>

<p>위 그림과 같이 두 선분 $\overline{P_0 P_1}$과 $\overline{Q_0 Q_1}$이 주어졌을 때 그 교점 $R$이 존재하는지, 존재한다면 어떤 점인지 구할 방법을 생각해보자. 이는 벡터 $\overrightarrow{R}$이 만족하는 방정식을 써서, 그 식을 만족하는 변수가 존재하는지 확인하고 존재한다면 그 값을 구하는 것으로 수행할 수 있다.</p>

<p>[여기에 그림 입력]</p>

<p>교점 $R$이 존재한다면 다음 두 식을 동시에 만족시키는 실수 $s$와 $t$가 존재한다.</p>

\[\begin{aligned}
\overrightarrow{P_0 R} &amp;= s \overrightarrow{P_0 P_1} &amp;\quad (0 \le s \le 1) \\
\overrightarrow{P_0 R} &amp;= \overrightarrow{P_0 Q_0} + t \overrightarrow{Q_0 Q_1} &amp;\quad (0 \le t \le 1) \\
\end{aligned}\]

<p>식을 정리하면 다음과 같다.</p>

\[s \overrightarrow{P_0 P_1} = \overrightarrow{P_0 Q_0} + t \overrightarrow{Q_0 Q_1} \quad (0 \le s, \; t \le 1)\]

<p>여기서 외적의 결합법칙과 같은 벡터를 외적하면 0이 된다는 사실을 이용하면 $s$와 $t$ 중 하나의 변수를 없앨 수 있다. 양변에 $\overrightarrow{Q_0 Q_1}$을 외적하면 $t$가 없어지고 다음 식이 나온다.</p>

\[s (\overrightarrow{P_0 P_1} \times \overrightarrow{Q_0 Q_1})
= (\overrightarrow{P_0 Q_0} \times \overrightarrow{Q_0 Q_1})\]

<p>$\overrightarrow{Q_0 Q_1}$ 대신 $\overrightarrow{P_0 P_1}$을 외적하면 $t$만에 대한 식도 얻을 수 있다.</p>

\[0
= (\overrightarrow{P_0 Q_0} \times \overrightarrow{P_0 P_1})
+ t (\overrightarrow{Q_0 Q_1} \times \overrightarrow{P_0 P_1})\]

\[-t (\overrightarrow{Q_0 Q_1} \times \overrightarrow{P_0 P_1})
= t (\overrightarrow{P_0 P_1} \times \overrightarrow{Q_0 Q_1})
= (\overrightarrow{P_0 Q_0} \times \overrightarrow{P_0 P_1})\]

<p>만약 $\overrightarrow{P_0 P_1} \times \overrightarrow{Q_0 Q_1} \neq 0$이라면 $s$와 $t$를 바로 구할 수 있다. 여기서부터 $\overrightarrow{P_0 P_1} \times \overrightarrow{Q_0 Q_1} \neq 0$인 경우, $\overrightarrow{P_0 P_1} \times \overrightarrow{Q_0 Q_1} = 0$인 경우로 케이스를 나눠서 풀어보자.</p>

<h3 id="overrightarrowp_0-p_1-times-overrightarrowq_0-q_1-neq-0인-경우">$\overrightarrow{P_0 P_1} \times \overrightarrow{Q_0 Q_1} \neq 0$인 경우</h3>

<p>$\overrightarrow{P_0 P_1} \times \overrightarrow{Q_0 Q_1} \neq 0$인 경우는 두 선분 $\overline{P_0 P_1}$과 $\overline{Q_0 Q_1}$이 둘 다 길이가 $0$이 아니고 평행하지 않은 경우다. 이 경우엔 앞서 나온 식으로 $s$와 $t$를 바로 계산할 수 있습니다.</p>

\[s = \frac{
  \overrightarrow{P_0 Q_0} \times \overrightarrow{Q_0 Q_1}
} {
    \overrightarrow{P_0 P_1} \times \overrightarrow{Q_0 Q_1}
} \qquad

t = \frac{
  \overrightarrow{P_0 Q_0} \times \overrightarrow{P_0 P_1}
} {
  \overrightarrow{P_0 P_1} \times \overrightarrow{Q_0 Q_1}
}\]

<p>$0 \leq s, \; t \leq 1$이면 교점이 존재하는 것이고, 그렇지 않으면 교점이 없다. 교점의 좌표 $R$은 $\overrightarrow{R} = \overrightarrow{P_0} + s\overrightarrow{P_0 P_1}$로 구할 수 있다.</p>

<h3 id="그-외의-경우">그 외의 경우</h3>

<p>$\overrightarrow{P_0 P_1} \times \overrightarrow{Q_0 Q_1} = 0$인 경우는 두 선분이 평행하거나 길이가 $0$인 경우다. 이 경우엔 두 선분이 겹치는지, 겹치지 않는지를 판단해야 한다.</p>

<p>일단, 네 점이 모두 한 직선 위에 있는지 판단해야 한다. 이는 네 점 $P_0$, $P_1$, $Q_0$, $Q_1$중 세 점을 고르는 모든 경우에 대해 외적이 $0$인지 보면 된다. 즉,</p>

\[\begin{aligned}
\overrightarrow{P_0 P_1} \times \overrightarrow{P_1 Q_0} &amp;= 0 \\
\overrightarrow{P_0 P_1} \times \overrightarrow{P_1 Q_1} &amp;= 0 \\
\overrightarrow{Q_0 Q_1} \times \overrightarrow{Q_1 P_0} &amp;= 0 \\
\overrightarrow{Q_0 Q_1} \times \overrightarrow{Q_1 P_1} &amp;= 0 \\
\end{aligned}\]

<p>이 네 등식이 모두 성립하는 지 보면 된다.</p>

<p>위 네 식 중 하나라도 성립하지 않으면 네 점이 한 직선 위에 있지 않은 것인데, 두 선분이 평행하지 않은 경우는 앞에서 이미 걸렀으므로 이때는 반드시 두 선분이 평행하고 만나지 않는 경우다. 따라서 이 때는 교점이 존재하지 않는다.</p>

<p>마지막으로 네 점이 한 직선 위에 있는 경우만 남았다.</p>

<p>[여기에 그림 입력]</p>

<p>$A_0 = \min(P_0, P_1)$, $A_1 = \max(P_0, P_1)$, $B_0 = \min(Q_0, Q_1)$, $B_1 = \max(Q_0, Q_1)$로 두자.. 이때 점의 비교 기준은 우선 $x$좌표가 작은 것이 더 작은 점이고, $x$좌표가 같다면 $y$좌표가 작은 것이 더 작은 점이다. 이렇게 하면 $\overrightarrow{A_0 A_1}$과 $\overrightarrow{B_0 B_1}$의 방향이 같아진다.</p>

<p>[여기에 그림 입력]</p>

<p>그런 다음, $L = \max(A_0, B_0)$, $R = \min(A_1, B_1)$이라고 하자. $L \leq R$이면 두 선분이 겹치는 것이고, $L = R$이면 교점이 $L$이고, $L &gt; R$이면 교점이 없다.</p>

<h2 id="오버플로-주의">오버플로 주의</h2>

<p>내부 계산을 정수형 또는 분수로만 진행한다면 오버플로가 좀 많이 날 수 있다. 점의 좌표 범위가 $10^9$ 이내라면, $s$와 $t$의 분자는 최대 $10^{18}$, 교점의 좌표는 여기에 벡터를 다시 곱하므로 분자가 최대 $10^{27}$까지 늘어난다. 최종 답안이 정확한 분수 형태일 필요가 없다면 적당한 타이밍에 부동소수점으로 바꿔주자. 최종 답안도 분수 형태로 만들고 싶다면 입력값으로 주어지는 좌표의 세제곱까지 처리할 수 있어야 한다. 예를 들어, 입력값의 범위가 <code class="language-plaintext highlighter-rouge">i32</code>라면 마지막에는 <code class="language-plaintext highlighter-rouge">i128</code>로 계산해야 한다.</p>

<p>이런 게 귀찮으면 파이썬 등 BigInt를 지원하는 언어를 쓰자.</p>

<h2 id="구현">구현</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">ll</span><span class="p">;</span>
<span class="k">typedef</span> <span class="kt">long</span> <span class="kt">double</span> <span class="n">ld</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="n">ll</span><span class="p">,</span> <span class="n">ll</span><span class="o">&gt;</span> <span class="n">pll</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="n">ld</span><span class="p">,</span> <span class="n">ld</span><span class="o">&gt;</span> <span class="n">pld</span><span class="p">;</span> 

<span class="n">ll</span> <span class="nf">cross</span><span class="p">(</span><span class="n">pll</span> <span class="n">a</span><span class="p">,</span> <span class="n">pll</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">a</span><span class="p">.</span><span class="n">first</span> <span class="o">*</span> <span class="n">b</span><span class="p">.</span><span class="n">second</span> <span class="o">-</span> <span class="n">a</span><span class="p">.</span><span class="n">second</span> <span class="o">*</span> <span class="n">b</span><span class="p">.</span><span class="n">first</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">pll</span> <span class="n">sub</span><span class="p">(</span><span class="n">pll</span> <span class="n">a</span><span class="p">,</span> <span class="n">pll</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span><span class="n">a</span><span class="p">.</span><span class="n">first</span> <span class="o">-</span> <span class="n">b</span><span class="p">.</span><span class="n">first</span><span class="p">,</span> <span class="n">a</span><span class="p">.</span><span class="n">second</span> <span class="o">-</span> <span class="n">b</span><span class="p">.</span><span class="n">second</span><span class="p">};</span>
<span class="p">}</span>

<span class="c1">// {0, {0, 0}}: no intersection</span>
<span class="c1">// {1, {x, y}}: intersection at (x, y)</span>
<span class="c1">// {2, {0, 0}}: two segments are overlapped (infinite intersections)</span>
<span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">pld</span><span class="o">&gt;</span> <span class="n">intersect</span><span class="p">(</span><span class="n">pll</span> <span class="n">p0</span><span class="p">,</span> <span class="n">pll</span> <span class="n">p1</span><span class="p">,</span> <span class="n">pll</span> <span class="n">q0</span><span class="p">,</span> <span class="n">pll</span> <span class="n">q1</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">pll</span> <span class="n">u</span> <span class="o">=</span> <span class="n">sub</span><span class="p">(</span><span class="n">p1</span><span class="p">,</span> <span class="n">p0</span><span class="p">);</span>
    <span class="n">pll</span> <span class="n">v</span> <span class="o">=</span> <span class="n">sub</span><span class="p">(</span><span class="n">q1</span><span class="p">,</span> <span class="n">q0</span><span class="p">);</span>
    <span class="n">ll</span> <span class="n">det</span> <span class="o">=</span> <span class="n">cross</span><span class="p">(</span><span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">det</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">p0</span><span class="p">.</span><span class="n">swap</span><span class="p">(</span><span class="n">p1</span><span class="p">);</span>
        <span class="n">u</span><span class="p">.</span><span class="n">first</span> <span class="o">*=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        <span class="n">u</span><span class="p">.</span><span class="n">second</span> <span class="o">*=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        <span class="n">det</span> <span class="o">*=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">det</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">pll</span> <span class="n">w</span> <span class="o">=</span> <span class="n">sub</span><span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="n">p0</span><span class="p">);</span>
        <span class="n">ll</span> <span class="n">cross_wu</span> <span class="o">=</span> <span class="n">cross</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">u</span><span class="p">);</span>
        <span class="n">ll</span> <span class="n">cross_wv</span> <span class="o">=</span> <span class="n">cross</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">v</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">cross_wu</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">cross_wu</span> <span class="o">&gt;</span> <span class="n">det</span> <span class="o">||</span> <span class="n">cross_wv</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">cross_wv</span> <span class="o">&gt;</span> <span class="n">det</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">}};</span>
        <span class="p">}</span>
        <span class="n">ld</span> <span class="n">s</span> <span class="o">=</span> <span class="p">(</span><span class="n">ld</span><span class="p">)</span><span class="n">cross_wv</span> <span class="o">/</span> <span class="n">det</span><span class="p">;</span>
        <span class="n">ld</span> <span class="n">t</span> <span class="o">=</span> <span class="p">(</span><span class="n">ld</span><span class="p">)</span><span class="n">cross_wu</span> <span class="o">/</span> <span class="n">det</span><span class="p">;</span>
        <span class="k">return</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="p">{</span><span class="n">p0</span><span class="p">.</span><span class="n">first</span> <span class="o">+</span> <span class="n">u</span><span class="p">.</span><span class="n">first</span> <span class="o">*</span> <span class="n">s</span><span class="p">,</span> <span class="n">p0</span><span class="p">.</span><span class="n">second</span> <span class="o">+</span> <span class="n">u</span><span class="p">.</span><span class="n">second</span> <span class="o">*</span> <span class="n">s</span><span class="p">}};</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">cross</span><span class="p">(</span><span class="n">sub</span><span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="n">p0</span><span class="p">),</span> <span class="n">u</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">cross</span><span class="p">(</span><span class="n">sub</span><span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="n">p1</span><span class="p">),</span> <span class="n">u</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">cross</span><span class="p">(</span><span class="n">sub</span><span class="p">(</span><span class="n">p0</span><span class="p">,</span> <span class="n">q0</span><span class="p">),</span> <span class="n">v</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">cross</span><span class="p">(</span><span class="n">sub</span><span class="p">(</span><span class="n">p0</span><span class="p">,</span> <span class="n">q1</span><span class="p">),</span> <span class="n">v</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">}};</span>
        <span class="p">}</span>
        <span class="n">pll</span> <span class="n">a0</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">p0</span><span class="p">,</span> <span class="n">p1</span><span class="p">);</span>
        <span class="n">pll</span> <span class="n">a1</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">p0</span><span class="p">,</span> <span class="n">p1</span><span class="p">);</span>
        <span class="n">pll</span> <span class="n">b0</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="n">q1</span><span class="p">);</span>
        <span class="n">pll</span> <span class="n">b1</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="n">q1</span><span class="p">);</span>
        <span class="n">pll</span> <span class="n">l</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">a0</span><span class="p">,</span> <span class="n">b0</span><span class="p">);</span>
        <span class="n">pll</span> <span class="n">r</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">a1</span><span class="p">,</span> <span class="n">b1</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">}};</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">l</span> <span class="o">==</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="p">{(</span><span class="n">ld</span><span class="p">)</span><span class="n">l</span><span class="p">.</span><span class="n">first</span><span class="p">,</span> <span class="p">(</span><span class="n">ld</span><span class="p">)</span><span class="n">l</span><span class="p">.</span><span class="n">second</span><span class="p">}};</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">}};</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>sendol</name><email>sendol39@gmail.com</email></author><category term="Algorithm" /><category term="Algorithm-Normal" /><category term="Geometry" /><summary type="html"><![CDATA[애드혹과 케이스 워크 노가다를 통한 선분 교차 판정은 좀 더럽다. 벡터를 사용해서 케이스를 좀 더 깔끔하게 분류해 선분의 교점을 구해보자.]]></summary></entry><entry><title type="html">Jekyll Github 블로그에 Latex 수식 사용</title><link href="http://localhost:4000/cs-blog/others/Jekyll-Github-%EB%B8%94%EB%A1%9C%EA%B7%B8%EC%97%90-LaTeX-%EC%88%98%EC%8B%9D-%EC%82%AC%EC%9A%A9/" rel="alternate" type="text/html" title="Jekyll Github 블로그에 Latex 수식 사용" /><published>2025-03-07T00:00:00+09:00</published><updated>2025-03-07T00:00:00+09:00</updated><id>http://localhost:4000/cs-blog/others/Jekyll-Github-%EB%B8%94%EB%A1%9C%EA%B7%B8%EC%97%90-LaTeX-%EC%88%98%EC%8B%9D-%EC%82%AC%EC%9A%A9</id><content type="html" xml:base="http://localhost:4000/cs-blog/others/Jekyll-Github-%EB%B8%94%EB%A1%9C%EA%B7%B8%EC%97%90-LaTeX-%EC%88%98%EC%8B%9D-%EC%82%AC%EC%9A%A9/"><![CDATA[<p>이 글에서는 <a href="https://github.com/mathjax/MathJax">Mathjax</a>를 이용해 Jekyll 블로그에 LaTex 문법을 이용한 수식을 넣는 법을 알아본다.</p>

<h2 id="마크다운-엔진-변경">마크다운 엔진 변경</h2>

<p><code class="language-plaintext highlighter-rouge">_config.yml</code>에서 <code class="language-plaintext highlighter-rouge"># Conversion</code>으로 시작되는 부분을 다음과 같이 바꾼다. <a href="https://github.com/mmistakes/minimal-mistakes">Minimal Mistakes</a> 등 일부 템플릿에서는 기본으로 적용되어 있다.</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Conversion</span>
<span class="na">markdown</span><span class="pi">:</span> <span class="s">kramdown</span>
<span class="na">highlighter</span><span class="pi">:</span> <span class="s">rouge</span>
<span class="na">lsi</span><span class="pi">:</span> <span class="no">false</span>
<span class="na">excerpt_separator</span><span class="pi">:</span> <span class="s2">"</span><span class="se">\n\n</span><span class="s">"</span>
<span class="na">incremental</span><span class="pi">:</span> <span class="no">false</span>
</code></pre></div></div>

<h2 id="모든-문서에-적용할-경우">모든 문서에 적용할 경우</h2>

<p><code class="language-plaintext highlighter-rouge">_includes/head.html</code> 맨 끝에 아래 내용을 붙여넣으면 끝이다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/x-mathjax-config"</span><span class="nt">&gt;</span>
  <span class="nx">MathJax</span><span class="p">.</span><span class="nx">Hub</span><span class="p">.</span><span class="nx">Config</span><span class="p">({</span>
      <span class="na">TeX</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">equationNumbers</span><span class="p">:</span> <span class="p">{</span>
          <span class="na">autoNumber</span><span class="p">:</span> <span class="dl">"</span><span class="s2">AMS</span><span class="dl">"</span>
        <span class="p">}</span>
      <span class="p">},</span>
      <span class="na">tex2jax</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">inlineMath</span><span class="p">:</span> <span class="p">[</span> <span class="p">[</span><span class="dl">'</span><span class="s1">$</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">$</span><span class="dl">'</span><span class="p">]</span> <span class="p">],</span>
      <span class="na">displayMath</span><span class="p">:</span> <span class="p">[</span> <span class="p">[</span><span class="dl">'</span><span class="s1">$$</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">$$</span><span class="dl">'</span><span class="p">],</span> <span class="p">[</span><span class="dl">'</span><span class="se">\\</span><span class="s1">[</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="se">\\</span><span class="s1">]</span><span class="dl">'</span><span class="p">]</span> <span class="p">],</span>
      <span class="na">processEscapes</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;script
  </span><span class="na">type=</span><span class="s">"text/javascript"</span>
  <span class="na">async</span>
  <span class="na">src=</span><span class="s">"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML"</span>
<span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div></div>

<h2 id="특정-문서에만-적용할-경우">특정 문서에만 적용할 경우</h2>

<h3 id="mathjax_supporthtml-생성"><code class="language-plaintext highlighter-rouge">mathjax_support.html</code> 생성</h3>

<p><code class="language-plaintext highlighter-rouge">_include</code> 디렉토리에 <code class="language-plaintext highlighter-rouge">mathjax_support.html</code>를 생성하고 위 섹션에 있는 코드를 그대로 입력한다.</p>

<h3 id="_layoutsdefaulthtml-파일-수정"><code class="language-plaintext highlighter-rouge">_layouts/default.html</code> 파일 수정</h3>

<p><code class="language-plaintext highlighter-rouge">&lt;head&gt;</code>에 아래 코드를 추가한다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% if page.use_math %}
  {% include mathjax_support.html %}
{% endif %}
</code></pre></div></div>

<h3 id="yaml-front-matter-설정">YAML front-matter 설정</h3>

<p>LaTeX 문법을 사용할 포스트의 front-matter에 <code class="language-plaintext highlighter-rouge">use_math: true</code>를 적용</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">Title</span><span class="pi">:</span> <span class="s">2025-03-07-Jekyll-Github-블로그에-LaTeX-수식-사용</span>
<span class="na">categories</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">Others</span>
<span class="na">tags</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">Web</span>
  <span class="pi">-</span> <span class="s">Blog</span>
  <span class="pi">-</span> <span class="s">Jekyll</span>
<span class="na">toc</span><span class="pi">:</span> <span class="no">true</span>
<span class="na">use_math</span><span class="pi">:</span> <span class="no">true</span>
<span class="nn">---</span>
</code></pre></div></div>

<h2 id="mathjax-수식-예시">MathJax 수식 예시</h2>

<h3 id="인라인-수식">인라인 수식</h3>

<div class="language-latex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>오일러 공식: <span class="p">$</span><span class="nb">e</span><span class="p">^{</span><span class="nb">ix</span><span class="p">}</span><span class="nb"> </span><span class="o">=</span><span class="nb"> </span><span class="nv">\cos</span><span class="o">(</span><span class="nb">x</span><span class="o">)</span><span class="nb"> </span><span class="o">+</span><span class="nb"> i</span><span class="nv">\sin</span><span class="o">(</span><span class="nb">x</span><span class="o">)</span><span class="p">$</span>
</code></pre></div></div>

<p>오일러 공식: $e^{ix} = \cos(x) + i\sin(x)$</p>

<h3 id="블록-수식">블록 수식</h3>

<div class="language-latex highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">$$</span><span class="nb">
K</span><span class="o">(</span><span class="nb">a,b</span><span class="o">)</span><span class="nb"> </span><span class="o">=</span><span class="nb"> </span><span class="nv">\int</span><span class="nb"> </span><span class="nv">\mathcal</span><span class="p">{</span><span class="nb">D</span><span class="p">}</span><span class="nb">x</span><span class="o">(</span><span class="nb">t</span><span class="o">)</span><span class="nb"> </span><span class="nv">\exp</span><span class="o">(</span><span class="m">2</span><span class="nv">\pi</span><span class="nb"> i S</span><span class="o">[</span><span class="nb">x</span><span class="o">]/</span><span class="nv">\hbar</span><span class="o">)</span><span class="nb">
</span><span class="p">$$</span>
</code></pre></div></div>

\[K(a,b) = \int \mathcal{D}x(t) \exp(2\pi i S[x]/\hbar)\]

<hr />

<h2 id="references">References</h2>
<ul>
  <li><a href="https://mkkim85.github.io/blog-apply-mathjax-to-jekyll-and-github-pages/">Jekyll Github 블로그에 MathJax로 수학식 표시하기</a></li>
  <li><a href="http://benlansdell.github.io/computing/mathjax/">MathJax, Jekyll and github pages</a></li>
</ul>]]></content><author><name>sendol</name><email>sendol39@gmail.com</email></author><category term="Others" /><category term="Web" /><category term="Blog" /><category term="Jekyll" /><summary type="html"><![CDATA[이 글에서는 Mathjax를 이용해 Jekyll 블로그에 LaTex 문법을 이용한 수식을 넣는 법을 알아본다.]]></summary></entry><entry><title type="html">Tree Dp 시간복잡도 분석</title><link href="http://localhost:4000/cs-blog/algorithm/Tree-DP-%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84-%EB%B6%84%EC%84%9D/" rel="alternate" type="text/html" title="Tree Dp 시간복잡도 분석" /><published>2025-03-06T00:00:00+09:00</published><updated>2025-03-06T00:00:00+09:00</updated><id>http://localhost:4000/cs-blog/algorithm/Tree-DP-%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84-%EB%B6%84%EC%84%9D</id><content type="html" xml:base="http://localhost:4000/cs-blog/algorithm/Tree-DP-%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84-%EB%B6%84%EC%84%9D/"><![CDATA[<p>Tree DP를 DFS를 이용해 구현할 때, 실제 시간복잡도는 코드를 보고 대충 생각한 것보다 작은 경우가 많다. 이 글에서는 그런 몇몇 케이스를 다룬다.</p>

<h2 id="자식-노드의-결과를-합칠-때-자식-서브트리-크기에-대한-다항식-시간이-걸릴-경우">자식 노드의 결과를 합칠 때 자식 서브트리 크기에 대한 다항식 시간이 걸릴 경우</h2>

<p>보통 Tree DP는 다음과 비슷한 함수를 만들고 루트 노드를 함수 인자로 넘겨 실행하면 풀 수 있다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">dfs</span><span class="p">(</span><span class="kt">int</span> <span class="n">node</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">(</span><span class="n">dp_table</span><span class="p">[</span><span class="n">node</span><span class="p">]</span> <span class="err">초기화</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">next</span> <span class="o">:</span> <span class="n">children</span><span class="p">[</span><span class="n">node</span><span class="p">])</span> <span class="p">{</span>
        <span class="n">dfs</span><span class="p">(</span><span class="n">next</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="p">(</span><span class="n">dp_table</span><span class="p">[</span><span class="n">next</span><span class="p">]</span><span class="err">들의</span> <span class="err">값을</span> <span class="err">이용해</span> <span class="n">dp_table</span><span class="p">[</span><span class="n">node</span><span class="p">]</span> <span class="err">계산</span><span class="p">);</span>
<span class="p">}</span>
<span class="n">dfs</span><span class="p">(</span><span class="n">root_node</span><span class="p">);</span>
</code></pre></div></div>

<p>노드 갯수가 $N$개인 트리에서 노드 $n$의 자식이 $k_n$개 있고, 이 자식들을 루트로 하는 $k$개의 서브트리의 크기가 각각 $|s^n_1|$, $|s^n_2|$, … , $|s^n_{k_n}|$라 해 보자. <br />
함수 마지막에서 자식 노드의 결과를 합치는데, 이 과정의 시간복잡도가 $|s^n_i| (1 \leq i \leq k_n)$에 대한 이차식이 되는 경우를 생각해보자. <br />
최악의 경우 각 노드에 대해 각 $|s_i|$가 $O(N)$, 노드를 합치는 횟수가 $O(N)$이므로 <code class="language-plaintext highlighter-rouge">dfs(root_node)</code>의 시간복잡도는 $O(N^3)$이 될 것 같지만, 실제로는 $O(N^2)$가 된다.</p>

<p>$n$이 루트인 서브트리의 크기를 $|n|$, 이 노드의 결과를 구하는 시간을 $T(n)$이라 해 보자. <br />
또한 자식 노드들의 결과를 합치는 시간복잡도가 $O(이차식)$이라는 것은, 자식 노드 $s^n_1$, $s^n_2$, … 의 결과를 합치는 데 $\sum_{1 \leq i \leq j \leq k_n} c |s^n_i| |s^n_j|$ ($c$는 상수) 이하의 시간이 걸린다는 뜻이다.<br /></p>

<p>$n$의 자식들 $s^n_i$에 대해 $T(s^n_i) \leq d|s^n_i|^2 = O(|s^n_i|^2)$ ($d는 상수) 라고 가정해 보자. 그러면,</p>

\[\begin{split}
&amp;T(n) \\
&amp;= \sum_{1 \leq i \leq j \leq k_n} c \|s^n_i\| \|s^n_j\| + \sum_{1 \leq i \leq k_n} T(s^n_i) \\
&amp;\leq \sum_{1 \leq i \leq j \leq k_n} c \|s^n_i\| \|s^n_j\| + \sum_{1 \leq i \leq k_n} d\|s^n_i\|^2 \\
&amp;= \sum_{1 \leq i \lt j \leq k_n} c\|s^n_i\| \|s^n_j\| + \sum_{1 \leq i \leq k_n} (c+d)\|s^n_i\|^2 \\
&amp;\leq \sum_{1 \leq i \lt j \leq k_n} 2e \|s^n_i\| \|s^n_j\| + \sum_{1 \leq i \leq k_n} e\|s^n_i\|^2 \quad \quad ({e &gt; c + d}) \\
&amp;= e \left( \sum_{1 \leq i \leq k_n} \|s^n_i\| \right) ^ 2 \\
&amp;= e (\|n\|- 1)^2 = O(\|n\|^2)
\end{split}\]

<p>가 되어 노드 $n$에 대해서도 $T(n) = O(|n|^2)$가 성립한다.</p>

<p>또한 base case인 리프 노드에 대해서는 $T(|n|) = O(1) &lt; O(|n|^2)$ 이므로, 수학적 귀납법에 의해 전체 문제를 $O(N)$ 시간에 풀 수 있다.</p>

<p>저걸 잘 일반화하면, 자식 노드의 결과를 합치는 시간복잡도가 $|s^n_1|$, $|s^n_2|$, … , $|s^n_{k_n}|$ 에 대한 $p$차식이면, 전체 문제를 $O(N^p)$ 시간에 풀 수 있다는 것도 알 수 있다.</p>

<h2 id="자식-노드를-합칠-때-자식-노드의-갯수에-대한-다항식-시간이-걸릴-경우">자식 노드를 합칠 때 자식 노드의 갯수에 대한 다항식 시간이 걸릴 경우</h2>

<p>대충 이런 경우를 생각해보자.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">dfs</span><span class="p">(</span><span class="kt">int</span> <span class="n">node</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">(</span><span class="n">dp_table</span><span class="p">[</span><span class="n">node</span><span class="p">]</span> <span class="err">초기화</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">next</span> <span class="o">:</span> <span class="n">children</span><span class="p">[</span><span class="n">node</span><span class="p">])</span> <span class="p">{</span>
        <span class="n">dfs</span><span class="p">(</span><span class="n">next</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">next1</span> <span class="o">:</span> <span class="n">children</span><span class="p">[</span><span class="n">node</span><span class="p">])</span> <span class="p">{</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">next2</span> <span class="o">:</span> <span class="n">children</span><span class="p">[</span><span class="n">node</span><span class="p">])</span> <span class="p">{</span>
            <span class="n">dp_table</span><span class="p">[</span><span class="n">node</span><span class="p">]</span> <span class="o">=</span> <span class="n">foo</span><span class="p">(</span><span class="n">dp_table</span><span class="p">[</span><span class="n">next1</span><span class="p">],</span> <span class="n">dp_table</span><span class="p">[</span><span class="n">next2</span><span class="p">]);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="n">dfs</span><span class="p">(</span><span class="n">root_node</span><span class="p">);</span>
</code></pre></div></div>

<p>이때 함수 <code class="language-plaintext highlighter-rouge">foo</code>는 <code class="language-plaintext highlighter-rouge">O(1)</code> 시간에 실행된다고 하자.</p>

<p>이것도 대충 보면 위와 비슷한 이유로 $O(N^3)$ 시간이 걸릴 것 같다. 하지만 이것도 $O(N^2)$다.</p>

<p>위와 마찬가지로, $n$이 루트인 서브트리의 크기를 $|n|$, 이 노드의 자식 노드의 갯수를 $k_n$, 이 노드의 결과를 구하는 시간을 $T(n)$이라 해 보자. <br />
자식 노드들의 결과를 합치는 시간복잡도는 $O({k_n}^2)$, 즉 $c{k_n}^2$ 이하이다 ($c$는 상수).</p>

<p>임의의 노드 $n$의 자식들 $s^n_i$에 대해 $T(s^n_i) \leq d|s^n_i|^2 = O(|s^n_i|^2)$ ($d는 상수) 라고 가정해 보자. 그러면,</p>

\[\begin{split}
&amp;T(n) \\
&amp;= c{k_n}^2 + \sum_{1 \leq i \leq k_n} T(s^n_i) \\
&amp;\leq c{k_n}^2 + \sum_{1 \leq i \leq k_n} d\|s^n_i\|^2 \\
&amp;= c \left( \sum_{1 \leq i \leq k_n} 1 \right) ^ 2+\sum_{1 \leq i \leq k_n} d\|s^n_i\|^2 \\
&amp;\leq c \left( \sum_{1 \leq i \leq k_n} \|s^n_i\| \right) ^ 2+\sum_{1 \leq i \leq k_n} d\|s^n_i\|^2 \\
&amp;\leq e \left( \sum_{1 \leq i \leq k_n} \|s^n_i\| \right) ^ 2+\sum_{1 \leq i \leq k_n} e\|s^n_i\|^2 \quad \quad ({e &gt; c + d}) \\
&amp;\leq 2e \left( \sum_{1 \leq i \leq k_n} \|s^n_i\| \right) ^ 2 \\
&amp;= 2e (\|n\|- 1)^2 = O(\|n\|^2)
\end{split}\]

<p>가 되어 위와 마찬가지로 수학적 귀납법에 의해 전체 문제를 $O(N^2)$에 해결할 수 있다. 이것도 자식 노드들의 결과를 합치는 시간복잡도는 $O({k_n}^p)$일 때 전체 문제를 $O(N^p)$에 해결할 수 있다고 일반화할 수 있다.</p>

<hr />

<h2 id="references">References</h2>
<p><a href="https://cubelover.tistory.com/31">cubelover의 블로그 - Tree Optimization</a></p>]]></content><author><name>sendol</name><email>sendol39@gmail.com</email></author><category term="Algorithm" /><category term="Algorithm-Hard" /><category term="DP" /><category term="Tree" /><summary type="html"><![CDATA[Tree DP를 DFS를 이용해 구현할 때, 실제 시간복잡도는 코드를 보고 대충 생각한 것보다 작은 경우가 많다. 이 글에서는 그런 몇몇 케이스를 다룬다.]]></summary></entry><entry><title type="html">Node.js + V8</title><link href="http://localhost:4000/cs-blog/others/Node.js-+-V8/" rel="alternate" type="text/html" title="Node.js + V8" /><published>2024-10-06T00:00:00+09:00</published><updated>2024-10-06T00:00:00+09:00</updated><id>http://localhost:4000/cs-blog/others/Node.js-+-V8</id><content type="html" xml:base="http://localhost:4000/cs-blog/others/Node.js-+-V8/"><![CDATA[<p>Node.js repo의 <code class="language-plaintext highlighter-rouge">./src</code> 디렉토리에 가 보면, 시스템 콜 사용 같은 저레벨 작업이나 퍼포먼스 향상을 위해 C++로 작성된 코드가 보일 것이다. 그리고 이 코드들을 까 보면 <code class="language-plaintext highlighter-rouge">v8</code> 네임스페이스의 뭔가로 가득 차 있어 C++만 잘 한다고 코드를 이해하기가 쉽지 않다. 이 글에서는 V8이 무엇인지, Node.js와 어떤 관계가 있는지, 그리고 Node.js의 C++ 코드를 이해하는데 도움이 되는 V8의 핵심 개념들을 살펴보겠다.</p>

<h2 id="v8이란-무엇인가">V8이란 무엇인가?</h2>

<p><a href="https://v8.dev/">V8</a>은 구글에서 개발한 C++ 기반의 오픈소스 JavaScript 엔진이다. JavaScript 엔진은 JavaScript 코드를 해석하고 실행하는 프로그램이다. V8은 웹 브라우저인 크롬의 핵심 엔진으로 사용되며, Node.js도 V8을 사용하여 JavaScript 코드를 실행한다.</p>

<p>JavaScript 런타임 환경의 일종이라고 하는 Node.js도 자바스크립트를 실행하는 프로그램인데, <strong>런타임 환경</strong>과 <strong>엔진</strong>의 차이는 구체적으로 다음과 같다. JavaScript 엔진은 일종의 인터프리터 또는 컴파일러에 해당된다. ECMAScript 표준에 따라 JavaScript 코드를 해석하고 실행하는 역할을 하지만, 파일 I/O나 네트워크 요청 같은 시스템 레벨의 기능은 제공하지 않는다. 런타임 환경은 이러한 엔진을 포함하며, 바닐라 JavaScript 외에도 브라우저의 DOM API나 Node.js의 <code class="language-plaintext highlighter-rouge">fs</code> 모듈 같은 기능을 제공하여 더 넓은 용도로 사용할 수 있게 한다.</p>

<p>V8의 다른 중요한 기능은, C++ 코드와 JavaScript 코드 간의 상호작용을 가능하게 하는 바인딩이다. 이를 통해 C++로 작성된 코드에서 JavaScript 함수를 호출하거나, JavaScript 코드에서 C++ 함수를 호출할 수 있다. Node.js의 C++ 코드는 이러한 바인딩을 통해 V8의 기능을 활용하여 JavaScript 코드와 상호작용한다.</p>

<p>이제 V8의 핵심 개념을 살펴보고, 이를 통해 JavaScript 코드에서 불러올 수 있는 C++ 함수가 어떻게 작성되는지 알아보자.</p>

<h2 id="v8의-핵심-개념">V8의 핵심 개념</h2>

<h3 id="isolate"><code class="language-plaintext highlighter-rouge">Isolate</code></h3>

<p><code class="language-plaintext highlighter-rouge">v8::Isolate</code> 클래스는 V8에서 작동되는 하나의 JavaScript 실행 환경을 나타낸다. 각 <code class="language-plaintext highlighter-rouge">Isolate</code>는 자신만의 메모리 공간을 가지며, 서로 다른 <code class="language-plaintext highlighter-rouge">Isolate</code> 간에는 데이터를 공유할 수 없다. 이는 JavaScript 코드가 실행되는 환경을 격리시켜, 서로 다른 <code class="language-plaintext highlighter-rouge">Isolate</code> 간에는 데이터 누출이나 충돌이 발생하지 않도록 한다.</p>

<p>Node.js에서는 각 요청이나 연결마다 새로운 <code class="language-plaintext highlighter-rouge">Isolate</code>를 생성하여 격리를 유지한다. 이를 통해 하나의 요청이 다른 요청에 영향을 미치지 않도록 보장한다.</p>

<h3 id="context"><code class="language-plaintext highlighter-rouge">Context</code></h3>

<p><code class="language-plaintext highlighter-rouge">v8::Context</code> 클래스는 JavaScript 코드가 실행되는 환경을 나타낸다. <code class="language-plaintext highlighter-rouge">Context</code>는 <code class="language-plaintext highlighter-rouge">Isolate</code> 내에 생성되며, 여러 개의 <code class="language-plaintext highlighter-rouge">Context</code>를 생성하여 각각의 JavaScript 코드를 실행할 수 있다. <code class="language-plaintext highlighter-rouge">Context</code>는 JavaScript 코드가 실행되는 환경을 나타내므로, <code class="language-plaintext highlighter-rouge">Context</code>를 통해 JavaScript 코드에서 사용할 수 있는 전역 객체나 함수 등을 정의할 수 있다.</p>

<h3 id="v8-javascript-value">V8 JavaScript Value</h3>

<p>V8은 JavaScript의 값들을 C++에서 사용할 수 있는 형태로 표현하기 위해 <code class="language-plaintext highlighter-rouge">v8::Value</code> 클래스를 사용한다. <code class="language-plaintext highlighter-rouge">v8::Value</code> 클래스는 JavaScript의 모든 자료형에 대응되며, 특정한 자료형을 나타내고 싶다면 서브클래스인 <code class="language-plaintext highlighter-rouge">v8::String</code>, <code class="language-plaintext highlighter-rouge">v8::Number</code>, <code class="language-plaintext highlighter-rouge">v8::Object</code> 등을 사용한다. <code class="language-plaintext highlighter-rouge">Value</code>의 실제 값을 C++의 타입으로 변환하기 위해서는 <code class="language-plaintext highlighter-rouge">Value</code> 객체를 적절한 서브클래스로 캐스팅한 후, <code class="language-plaintext highlighter-rouge">.Value()</code> 메소드를 사용한다.</p>

<h3 id="value-handle">Value handle</h3>

<p>JavaScript value는 <code class="language-plaintext highlighter-rouge">v8::Value</code> 객체로 표현되며, 이 객체를 다루기 위해 handle이라는 일종의 포인터를 사용한다. <code class="language-plaintext highlighter-rouge">v8::Value</code> 객체는 <code class="language-plaintext highlighter-rouge">Local</code>, <code class="language-plaintext highlighter-rouge">Global</code>, 두 가지 타입의 handle을 가질 수 있다.</p>

<h4 id="local-handle"><code class="language-plaintext highlighter-rouge">Local</code> handle</h4>

<p><code class="language-plaintext highlighter-rouge">v8::Local&lt;T&gt;</code> handle은 <code class="language-plaintext highlighter-rouge">v8::Value</code> 객체를 가리키는 임시 포인터이다. 특정 스코프 내에서만 유효하며, 스코프를 벗어나면 자동으로 해제된다. 주로 함수 내의 지역 변수로 사용된다.</p>

<p><code class="language-plaintext highlighter-rouge">Local</code> handle이 생성되기 이전에, <code class="language-plaintext highlighter-rouge">v8::HandleScope</code>나 <code class="language-plaintext highlighter-rouge">v8::EscapableHandleScope</code> 객체가 스택에 존재해야 한다. <code class="language-plaintext highlighter-rouge">Local</code> handle은 이 스코프에 추가되며, 스코프와 함께 삭제된다. <code class="language-plaintext highlighter-rouge">EscapableHandleScope</code>는 <code class="language-plaintext highlighter-rouge">HandleScope</code>와 달리 <code class="language-plaintext highlighter-rouge">Local</code> handle을 반환할 수 있으며, 이를 통해 handle을 다른 스코프로 넘길 수 있다.</p>

<p>단, binding 함수 내에서 <code class="language-plaintext highlighter-rouge">Local</code> handle을 사용할 때는 이미 함수 밖에 <code class="language-plaintext highlighter-rouge">HandleScope</code>가 존재하므로, 다른 스코프를 생성할 필요가 없다.</p>

<p>간단한 JavaScript 코드와 그에 대응되는 C++ 코드를 살펴보자.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">getFoo</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">foo</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">v8</span><span class="o">::</span><span class="n">Local</span><span class="o">&lt;</span><span class="n">v8</span><span class="o">::</span><span class="n">Value</span><span class="o">&gt;</span> <span class="n">GetFoo</span><span class="p">(</span><span class="n">v8</span><span class="o">::</span><span class="n">Local</span><span class="o">&lt;</span><span class="n">v8</span><span class="o">::</span><span class="n">Context</span><span class="o">&gt;</span> <span class="n">context</span><span class="p">,</span>
                            <span class="n">v8</span><span class="o">::</span><span class="n">Local</span><span class="o">&lt;</span><span class="n">v8</span><span class="o">::</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">obj</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">v8</span><span class="o">::</span><span class="n">Isolate</span><span class="o">*</span> <span class="n">isolate</span> <span class="o">=</span> <span class="n">context</span><span class="o">-&gt;</span><span class="n">GetIsolate</span><span class="p">();</span>
  <span class="n">v8</span><span class="o">::</span><span class="n">EscapableHandleScope</span> <span class="n">handle_scope</span><span class="p">(</span><span class="n">isolate</span><span class="p">);</span>

  <span class="c1">// The 'foo_string' handle cannot be returned from this function because</span>
  <span class="c1">// it is not “escaped” with `.Escape()`.</span>
  <span class="n">v8</span><span class="o">::</span><span class="n">Local</span><span class="o">&lt;</span><span class="n">v8</span><span class="o">::</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">foo_string</span> <span class="o">=</span>
      <span class="n">v8</span><span class="o">::</span><span class="n">String</span><span class="o">::</span><span class="n">NewFromUtf8</span><span class="p">(</span><span class="n">isolate</span><span class="p">,</span> <span class="s">"foo"</span><span class="p">).</span><span class="n">ToLocalChecked</span><span class="p">();</span>

  <span class="n">v8</span><span class="o">::</span><span class="n">Local</span><span class="o">&lt;</span><span class="n">v8</span><span class="o">::</span><span class="n">Value</span><span class="o">&gt;</span> <span class="n">return_value</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">obj</span><span class="o">-&gt;</span><span class="n">Get</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">foo_string</span><span class="p">).</span><span class="n">ToLocal</span><span class="p">(</span><span class="o">&amp;</span><span class="n">return_value</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">handle_scope</span><span class="p">.</span><span class="n">Escape</span><span class="p">(</span><span class="n">return_value</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="c1">// There was a JS exception! Handle it somehow.</span>
    <span class="k">return</span> <span class="n">v8</span><span class="o">::</span><span class="n">Local</span><span class="o">&lt;</span><span class="n">v8</span><span class="o">::</span><span class="n">Value</span><span class="o">&gt;</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="global-handle"><code class="language-plaintext highlighter-rouge">Global</code> handle</h4>

<p><code class="language-plaintext highlighter-rouge">v8::Global&lt;T&gt;</code> handle은 JavaScript 엔진이 종료되지 않는 한 계속 유지될 수 있는 포인터이다. 전역 변수나 모듈 변수 같이 계속 사용되는 값들에 사용된다.</p>

<p><code class="language-plaintext highlighter-rouge">Global</code> handle에는 strong과 weak 두 가지 타입이 있다. strong handle은 JavaScript 엔진이 종료되지 않는 한 계속 유지되는 반면, weak handle은 다른 값에 의해 참조되지 않으면 자동으로 해제된다.</p>

<h3 id="exception-handling">Exception handling</h3>

<p>V8은 C++의 exception을 JavaScript에 직접 bind할 수 없다. 그 대신 <code class="language-plaintext highlighter-rouge">Maybe</code> 타입을 사용하거나 <code class="language-plaintext highlighter-rouge">TryCatch</code> 객체를 사용하여 JavaScript 코드에서 발생한 예외를 처리할 수 있다.</p>

<h4 id="maybe-maybelocal-타입"><code class="language-plaintext highlighter-rouge">Maybe</code>, <code class="language-plaintext highlighter-rouge">MaybeLocal</code> 타입</h4>

<p>V8의 <code class="language-plaintext highlighter-rouge">Maybe&lt;T&gt;</code>와 <code class="language-plaintext highlighter-rouge">MaybeLocal&lt;T&gt;</code> 타입은 반환값이 있을 수도 있고 없을 수도 있는 함수의 반환값을 나타낸다. <code class="language-plaintext highlighter-rouge">std::optional</code>과 비슷한 것이라고 보면 된다. <code class="language-plaintext highlighter-rouge">Maybe&lt;T&gt;</code>의 값이 비어 있는 경우 (<code class="language-plaintext highlighter-rouge">.IsNothing()</code>이 <code class="language-plaintext highlighter-rouge">true</code>인 경우)는 예외가 발생한 것으로 간주할 수 있다. 함수의 반환 타입이 <code class="language-plaintext highlighter-rouge">Maybe&lt;T&gt;</code>인 경우, 함수 내부에서 서브클래스인 <code class="language-plaintext highlighter-rouge">Just&lt;T&gt;</code>나 <code class="language-plaintext highlighter-rouge">Nothing&lt;T&gt;</code>을 반환하여 값을 반환하거나 예외를 처리할 수 있다.</p>

<p><code class="language-plaintext highlighter-rouge">MaybeLocal&lt;T&gt;</code>는 <code class="language-plaintext highlighter-rouge">Local</code> handle을 반환하는 함수의 반환 타입으로 사용된다. <code class="language-plaintext highlighter-rouge">MaybeLocal&lt;T&gt;</code>는 <code class="language-plaintext highlighter-rouge">Maybe&lt;T&gt;</code>와 비슷하게 동작하지만, <code class="language-plaintext highlighter-rouge">Local</code> handle을 반환한다는 점이 다르고 메소드 이름에도 차이가 있다.</p>

<table>
  <thead>
    <tr>
      <th><code class="language-plaintext highlighter-rouge">Maybe</code></th>
      <th><code class="language-plaintext highlighter-rouge">MaybeLocal</code></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">maybe.IsNothing()</code></td>
      <td><code class="language-plaintext highlighter-rouge">maybe_local.IsEmpty()</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">maybe.IsJust()</code></td>
      <td><code class="language-plaintext highlighter-rouge">!maybe_local.IsEmpty()</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">maybe.To(&amp;value)</code></td>
      <td><code class="language-plaintext highlighter-rouge">maybe_local.ToLocal(&amp;local)</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">maybe.ToChecked()</code></td>
      <td><code class="language-plaintext highlighter-rouge">maybe_local.ToLocalChecked()</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">maybe.FromJust()</code></td>
      <td><code class="language-plaintext highlighter-rouge">maybe_local.ToLocalChecked()</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">maybe.Check()</code></td>
      <td>–</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">v8::Nothing&lt;T&gt;()</code></td>
      <td><code class="language-plaintext highlighter-rouge">v8::MaybeLocal&lt;T&gt;()</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">v8::Just&lt;T&gt;(value)</code></td>
      <td><code class="language-plaintext highlighter-rouge">v8::MaybeLocal&lt;T&gt;(value)</code></td>
    </tr>
  </tbody>
</table>

<h4 id="trycatch-객체"><code class="language-plaintext highlighter-rouge">TryCatch</code> 객체</h4>

<h2 id="funtion-binding">Funtion binding</h2>

<p>이제 binding funciton을 쓰기 위한 정말 기초적인 것들은 살펴봤다. 이제 실제로 JavaScript 코드에서 불러올 수 있는 C++ 함수를 작성해보자.</p>

<p>JavaScript에 노출되는 C++ 함수는 다음과 같은 형태를 가진다. 아래 함수는 <code class="language-plaintext highlighter-rouge">node_util.cc</code> 파일에 정의된 함수로, <code class="language-plaintext highlighter-rouge">ArrayBufferView</code> 객체가 주어졌을 때 해당 객체가 버퍼를 가지고 있는지 확인하는 함수이다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">ArrayBufferViewHasBuffer</span><span class="p">(</span><span class="k">const</span> <span class="n">FunctionCallbackInfo</span><span class="o">&lt;</span><span class="n">Value</span><span class="o">&gt;&amp;</span> <span class="n">args</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">CHECK</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">IsArrayBufferView</span><span class="p">());</span>
  <span class="n">args</span><span class="p">.</span><span class="n">GetReturnValue</span><span class="p">().</span><span class="n">Set</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">As</span><span class="o">&lt;</span><span class="n">ArrayBufferView</span><span class="o">&gt;</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">HasBuffer</span><span class="p">());</span>
<span class="p">}</span>
</code></pre></div></div>

<p>(네임스페이스는 <code class="language-plaintext highlighter-rouge">using v8;</code>로 설정되어 있다고 가정한다.)</p>

<p><code class="language-plaintext highlighter-rouge">args</code>는 JavaScript 함수에 전달된 전체 인자를 담고 있고, <code class="language-plaintext highlighter-rouge">args[i]</code>는 i번째 (0-based) 인자를 나타낸다. <code class="language-plaintext highlighter-rouge">args.GetReturnValue()</code>는 함수의 반환값을 설정하는데 사용되며, <code class="language-plaintext highlighter-rouge">Set()</code> 메소드를 통해 반환값을 설정한다.</p>

<p>이 함수를 JavaScript에서 사용하려면 다음과 같이 <code class="language-plaintext highlighter-rouge">SetMethod</code>, <code class="language-plaintext highlighter-rouge">SetMethodNoSideEffect</code> 등의 함수를 이용해 Node.js의 <code class="language-plaintext highlighter-rouge">target</code> 객체에 함수를 등록해야 한다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">Initialize</span><span class="p">(</span><span class="n">Local</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">target</span><span class="p">,</span>
                <span class="n">Local</span><span class="o">&lt;</span><span class="n">Value</span><span class="o">&gt;</span> <span class="n">unused</span><span class="p">,</span>
                <span class="n">Local</span><span class="o">&lt;</span><span class="n">Context</span><span class="o">&gt;</span> <span class="n">context</span><span class="p">,</span>
                <span class="kt">void</span><span class="o">*</span> <span class="n">priv</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">Environment</span><span class="o">*</span> <span class="n">env</span> <span class="o">=</span> <span class="n">Environment</span><span class="o">::</span><span class="n">GetCurrent</span><span class="p">(</span><span class="n">context</span><span class="p">);</span>

  <span class="n">SetMethod</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">target</span><span class="p">,</span> <span class="s">"getaddrinfo"</span><span class="p">,</span> <span class="n">GetAddrInfo</span><span class="p">);</span>
  <span class="c1">// ...</span>
<span class="p">}</span>

<span class="n">NODE_MODULE_CONTEXT_AWARE</span><span class="p">(</span><span class="n">NODE_GYP_MODULE_NAME</span><span class="p">,</span> <span class="n">Initialize</span><span class="p">);</span>
</code></pre></div></div>

<p>이제 기존에 존재하는 모듈에 <code class="language-plaintext highlighter-rouge">SumNumbers</code>라는 함수를 추가해보자. 이 함수는 배열을 받아 배열의 모든 요소를 더한 값을 반환하며, 배열의 요소가 숫자가 아닌 경우 예외를 발생시킨다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// This could also return a v8::MaybeLocal&lt;v8::Number&gt;, for example.</span>
<span class="n">v8</span><span class="o">::</span><span class="n">Maybe</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">SumNumbers</span><span class="p">(</span><span class="n">v8</span><span class="o">::</span><span class="n">Local</span><span class="o">&lt;</span><span class="n">v8</span><span class="o">::</span><span class="n">Context</span><span class="o">&gt;</span> <span class="n">context</span><span class="p">,</span>
                             <span class="n">v8</span><span class="o">::</span><span class="n">Local</span><span class="o">&lt;</span><span class="n">v8</span><span class="o">::</span><span class="n">Array</span><span class="o">&gt;</span> <span class="n">array_of_integers</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">v8</span><span class="o">::</span><span class="n">Isolate</span><span class="o">*</span> <span class="n">isolate</span> <span class="o">=</span> <span class="n">context</span><span class="o">-&gt;</span><span class="n">GetIsolate</span><span class="p">();</span>
  <span class="n">v8</span><span class="o">::</span><span class="n">HandleScope</span> <span class="n">handle_scope</span><span class="p">(</span><span class="n">isolate</span><span class="p">);</span>

  <span class="kt">double</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="k">for</span> <span class="p">(</span><span class="kt">uint32_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">array_of_integers</span><span class="o">-&gt;</span><span class="n">Length</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">v8</span><span class="o">::</span><span class="n">Local</span><span class="o">&lt;</span><span class="n">v8</span><span class="o">::</span><span class="n">Value</span><span class="o">&gt;</span> <span class="n">entry</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">array_of_integers</span><span class="o">-&gt;</span><span class="n">Get</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">i</span><span class="p">).</span><span class="n">ToLocal</span><span class="p">(</span><span class="o">&amp;</span><span class="n">entry</span><span class="p">))</span> <span class="p">{</span>
      <span class="c1">// Oops, we might have hit a getter that throws an exception!</span>
      <span class="c1">// It's better to not continue return an empty (“nothing”) Maybe.</span>
      <span class="k">return</span> <span class="n">v8</span><span class="o">::</span><span class="n">Nothing</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">entry</span><span class="o">-&gt;</span><span class="n">IsNumber</span><span class="p">())</span> <span class="p">{</span>
      <span class="c1">// Let's just skip any non-numbers. It would also be reasonable to throw</span>
      <span class="c1">// an exception here, e.g. using the error system in src/node_errors.h,</span>
      <span class="c1">// and then to return an empty Maybe again.</span>
      <span class="k">continue</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// This cast is valid, because we've made sure it's really a number.</span>
    <span class="n">v8</span><span class="o">::</span><span class="n">Local</span><span class="o">&lt;</span><span class="n">v8</span><span class="o">::</span><span class="n">Number</span><span class="o">&gt;</span> <span class="n">entry_as_number</span> <span class="o">=</span> <span class="n">entry</span><span class="p">.</span><span class="n">As</span><span class="o">&lt;</span><span class="n">v8</span><span class="o">::</span><span class="n">Number</span><span class="o">&gt;</span><span class="p">();</span>

    <span class="n">sum</span> <span class="o">+=</span> <span class="n">entry_as_number</span><span class="o">-&gt;</span><span class="n">Value</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="n">v8</span><span class="o">::</span><span class="n">Just</span><span class="p">(</span><span class="n">sum</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// Function that is exposed to JS:</span>
<span class="kt">void</span> <span class="n">SumNumbers</span><span class="p">(</span><span class="k">const</span> <span class="n">v8</span><span class="o">::</span><span class="n">FunctionCallbackInfo</span><span class="o">&lt;</span><span class="n">v8</span><span class="o">::</span><span class="n">Value</span><span class="o">&gt;&amp;</span> <span class="n">args</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// This will crash if the first argument is not an array. Let's assume we</span>
  <span class="c1">// have performed type checking in a JavaScript wrapper function.</span>
  <span class="n">CHECK</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">IsArray</span><span class="p">());</span>

  <span class="kt">double</span> <span class="n">sum</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">SumNumbers</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">GetIsolate</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">GetCurrentContext</span><span class="p">(),</span>
                  <span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">As</span><span class="o">&lt;</span><span class="n">v8</span><span class="o">::</span><span class="n">Array</span><span class="o">&gt;</span><span class="p">()).</span><span class="n">To</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sum</span><span class="p">))</span> <span class="p">{</span>
    <span class="c1">// Exception was thrown</span>
    <span class="c1">// Nothing to do, we can just return directly to JavaScript.</span>
    <span class="k">return</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="n">args</span><span class="p">.</span><span class="n">GetReturnValue</span><span class="p">().</span><span class="n">Set</span><span class="p">(</span><span class="n">sum</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>첫 번째 함수는 배열의 합을 구하는 실제 로직이 담겨 있는 함수로, 다른 함수에서의 예외 처리를 위해 <code class="language-plaintext highlighter-rouge">Maybe</code> 타입을 반환한다. 두 번째 함수는 JavaScript와 실제로 binding되는 wrapper 함수로, <code class="language-plaintext highlighter-rouge">Maybe</code> 타입을 처리하여 JavaScript에 반환한다.</p>

<p>두 번째 함수의 if문 내 조건식이 <code class="language-plaintext highlighter-rouge">!SumNumbers(...).To(&amp;sum)</code>인 이유는, <code class="language-plaintext highlighter-rouge">SumNumbers</code> 함수가 <code class="language-plaintext highlighter-rouge">Maybe</code> 타입을 반환하기 때문이다. <code class="language-plaintext highlighter-rouge">To</code> 메소드는 <code class="language-plaintext highlighter-rouge">Maybe</code> 타입을 받아서 그 안에 있는 값을 <code class="language-plaintext highlighter-rouge">sum</code>에 넣어주는 역할을 한다. 만약 <code class="language-plaintext highlighter-rouge">SumNumbers</code> 함수가 <code class="language-plaintext highlighter-rouge">Nothing</code>을 반환한다면, <code class="language-plaintext highlighter-rouge">To</code> 메소드는 <code class="language-plaintext highlighter-rouge">false</code>를 반환하고 <code class="language-plaintext highlighter-rouge">sum</code>에는 아무 값도 들어가지 않는다.</p>

<p>이제 이 함수를 Node.js에서 사용할 수 있도록 <code class="language-plaintext highlighter-rouge">target</code> 객체에 등록하면 된다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">Initialize</span><span class="p">(</span><span class="n">Local</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">target</span><span class="p">,</span>
                <span class="n">Local</span><span class="o">&lt;</span><span class="n">Value</span><span class="o">&gt;</span> <span class="n">unused</span><span class="p">,</span>
                <span class="n">Local</span><span class="o">&lt;</span><span class="n">Context</span><span class="o">&gt;</span> <span class="n">context</span><span class="p">,</span>
                <span class="kt">void</span><span class="o">*</span> <span class="n">priv</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">Environment</span><span class="o">*</span> <span class="n">env</span> <span class="o">=</span> <span class="n">Environment</span><span class="o">::</span><span class="n">GetCurrent</span><span class="p">(</span><span class="n">context</span><span class="p">);</span>

  <span class="cm">/*
  / Other functions...
  */</span>

  <span class="n">SetMethod</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">target</span><span class="p">,</span> <span class="s">"sumNumbers"</span><span class="p">,</span> <span class="n">SumNumbers</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>마지막으로, js 파일에서 이 함수를 사용할 수 있도록 <code class="language-plaintext highlighter-rouge">sumNumbers</code> 함수를 등록하면 된다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span> <span class="nx">sumNumbers</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">internalBinding</span><span class="p">(</span><span class="dl">"</span><span class="s2">MODULE_NAME</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div>

<p>주의할 점으로, C++ 코드의 주석에도 있지만 <code class="language-plaintext highlighter-rouge">SumNumbers</code> 함수로 들어오는 인자가 <code class="language-plaintext highlighter-rouge">Array</code> 타입이 아닌 경우에 대한 예외 처리가 없다. 이는 JavaScript 코드에서 미리 타입 체크를 하고 넘겨주는 것이 좋다.</p>

<p>어쩌다 보니 Node.js의 <a href="https://github.com/nodejs/node/tree/main/src/README.md">Node.js C++ codebase 공식 문서</a>를 번역해서 <code class="language-plaintext highlighter-rouge">libuv</code> 내용 날린 다음에 압축해 놓은 것 같은 글이 됐는데 글이 꽤 길어졌다. 그 와중에 메모리 관리, bootstrap 과정에서의 C++ binding 로딩 등 빠진 내용도 좀 있다. 나중에 시간나면 더 살펴봐야겠다.</p>

<ul>
  <li>이 글의 코드 대부분은 Node.js C++ codebase 공식 문서에서 가져왔다.</li>
</ul>]]></content><author><name>sendol</name><email>sendol39@gmail.com</email></author><category term="Others" /><category term="Node.js" /><summary type="html"><![CDATA[Node.js repo의 ./src 디렉토리에 가 보면, 시스템 콜 사용 같은 저레벨 작업이나 퍼포먼스 향상을 위해 C++로 작성된 코드가 보일 것이다. 그리고 이 코드들을 까 보면 v8 네임스페이스의 뭔가로 가득 차 있어 C++만 잘 한다고 코드를 이해하기가 쉽지 않다. 이 글에서는 V8이 무엇인지, Node.js와 어떤 관계가 있는지, 그리고 Node.js의 C++ 코드를 이해하는데 도움이 되는 V8의 핵심 개념들을 살펴보겠다.]]></summary></entry><entry><title type="html">Node.js Net.lookupandconnect 버그 수정</title><link href="http://localhost:4000/cs-blog/others/Node.js-net.lookUpAndConnect-%EB%B2%84%EA%B7%B8-%EC%88%98%EC%A0%95/" rel="alternate" type="text/html" title="Node.js Net.lookupandconnect 버그 수정" /><published>2024-07-29T00:00:00+09:00</published><updated>2024-07-29T00:00:00+09:00</updated><id>http://localhost:4000/cs-blog/others/Node.js-net.lookUpAndConnect-%EB%B2%84%EA%B7%B8-%EC%88%98%EC%A0%95</id><content type="html" xml:base="http://localhost:4000/cs-blog/others/Node.js-net.lookUpAndConnect-%EB%B2%84%EA%B7%B8-%EC%88%98%EC%A0%95/"><![CDATA[<p>일단 저번에 가상환경 밖에서 돌렸을 때 에러가 떴던 테스트의 에러 메세지부터 살펴보자.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">node/test/parallel/test-net-socket-connect-without-cb.js</code></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>=== release test-net-socket-connect-without-cb ===                            
Path: parallel/test-net-socket-connect-without-cb
node:events:498
      throw er; // Unhandled 'error' event
      ^

Error: getaddrinfo ENOTFOUND localhost
    at GetAddrInfoReqWrap.onlookup [as oncomplete] (node:dns:109:26)
Emitted 'error' event on Socket instance at:
    at emitErrorNT (node:internal/streams/destroy:170:8)
    at emitErrorCloseNT (node:internal/streams/destroy:129:3)
    at process.processTicksAndRejections (node:internal/process/task_queues:82:21) {
  errno: -3007,
  code: 'ENOTFOUND',
  syscall: 'getaddrinfo',
  hostname: 'localhost'
}
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">node/test/parallel/test-tcp-wrap-listen.js</code></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>=== release test-tcp-wrap-listen ===                                          
Path: parallel/test-tcp-wrap-listen
(node:377826) internal/test/binding: These APIs are for internal testing only. Do not use them.
(Use `node --trace-warnings ...` to show where the warning was created)
node:events:498
      throw er; // Unhandled 'error' event
      ^

Error: getaddrinfo ENOTFOUND localhost
    at GetAddrInfoReqWrap.onlookup [as oncomplete] (node:dns:109:26)
Emitted 'error' event on Socket instance at:
    at emitErrorNT (node:internal/streams/destroy:170:8)
    at emitErrorCloseNT (node:internal/streams/destroy:129:3)
    at process.processTicksAndRejections (node:internal/process/task_queues:82:21) {
  errno: -3007,
  code: 'ENOTFOUND',
  syscall: 'getaddrinfo',
  hostname: 'localhost'
}
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">localhost</code>에 연결을 시도하고 있는 것 같다. <code class="language-plaintext highlighter-rouge">node/test/parallel/test-net-socket-connect-without-cb.js</code> 코드에 로그를 찍어서 <code class="language-plaintext highlighter-rouge">client.connect</code> 함수에 뭔 인자가 넘어가는지 한 번 보자.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">'</span><span class="s1">use strict</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">common</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../common</span><span class="dl">'</span><span class="p">);</span>

<span class="c1">// This test ensures that socket.connect can be called without callback</span>
<span class="c1">// which is optional.</span>

<span class="kd">const</span> <span class="nx">net</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">net</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">net</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="nx">common</span><span class="p">.</span><span class="nx">mustCall</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">conn</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">conn</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
  <span class="nx">server</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
<span class="p">})).</span><span class="nx">listen</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">common</span><span class="p">.</span><span class="nx">mustCall</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">net</span><span class="p">.</span><span class="nx">Socket</span><span class="p">();</span>

  <span class="nx">client</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">connect</span><span class="dl">'</span><span class="p">,</span> <span class="nx">common</span><span class="p">.</span><span class="nx">mustCall</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">client</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
  <span class="p">}));</span>

  <span class="kd">const</span> <span class="nx">address</span> <span class="o">=</span> <span class="nx">server</span><span class="p">.</span><span class="nx">address</span><span class="p">();</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">common</span><span class="p">.</span><span class="nx">hasIPv6</span> <span class="o">&amp;&amp;</span> <span class="nx">address</span><span class="p">.</span><span class="nx">family</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">IPv6</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Necessary to pass CI running inside containers.</span>
    <span class="nx">client</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">address</span><span class="p">.</span><span class="nx">port</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">address</span><span class="p">);</span>      <span class="c1">// added</span>
    <span class="nx">client</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">address</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}));</span>
</code></pre></div></div>

<p>Output</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="nl">address</span><span class="p">:</span> <span class="dl">'</span><span class="s1">::</span><span class="dl">'</span><span class="p">,</span> <span class="nx">family</span><span class="p">:</span> <span class="dl">'</span><span class="s1">IPv6</span><span class="dl">'</span><span class="p">,</span> <span class="nx">port</span><span class="p">:</span> <span class="mi">38065</span><span class="p">}</span>
</code></pre></div></div>

<p>뭔가 이상하다. <code class="language-plaintext highlighter-rouge">localhost</code>라는 DNS 주소가 아니라 <code class="language-plaintext highlighter-rouge">::</code>라는 IPv6 주소가 넘어가는데… 또 이상한 게 있는데, 아래 코드를 <code class="language-plaintext highlighter-rouge">main</code> branch의 node로 실행시킨 후 <code class="language-plaintext highlighter-rouge">nc :: 12345</code> 명령어로 서버에 접속하면 접속이 잘 된다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">'</span><span class="s1">use strict</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">net</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">net</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">net</span><span class="p">.</span><span class="nx">createServer</span><span class="p">((</span><span class="nx">conn</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">conn</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello World</span><span class="se">\n</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">conn</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
    <span class="nx">server</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
<span class="p">}).</span><span class="nx">listen</span><span class="p">({</span>
    <span class="na">host</span><span class="p">:</span> <span class="dl">'</span><span class="s1">::</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">port</span><span class="p">:</span> <span class="mi">12345</span><span class="p">,</span>
    <span class="na">family</span><span class="p">:</span> <span class="dl">'</span><span class="s1">IPv6</span><span class="dl">'</span>
<span class="p">},</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">net</span><span class="p">.</span><span class="nx">Socket</span><span class="p">();</span>

    <span class="nx">client</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">connect</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="c1">// send message and close</span>
        <span class="nx">client</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello World</span><span class="se">\n</span><span class="dl">"</span><span class="p">);</span>
        <span class="nx">client</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
    <span class="p">});</span><span class="nx">로</span>
<span class="p">});</span>
</code></pre></div></div>

<p>추가로, 테스트 코드의 에러 내용으로 구글링을 해 보니까 <code class="language-plaintext highlighter-rouge">/etc/hosts</code>를 수정해 <code class="language-plaintext highlighter-rouge">localhost</code>가 <code class="language-plaintext highlighter-rouge">::</code> 주소로 resolve 될 수 있게 하면 된다고 하는데, 그 전에 Node.js에서 굳이 IP 주소가 아니라 DNS 주소로 연결을 시도하는 것 부터가 문제인 것 같아서 일단 놔두기로 했다.</p>

<p><code class="language-plaintext highlighter-rouge">node/lib/net.js</code> 코드에 있는 <code class="language-plaintext highlighter-rouge">net.Socket.connect</code> 함수(<code class="language-plaintext highlighter-rouge">node/lib/net.js</code>에서는 프로토타입 함수인 <code class="language-plaintext highlighter-rouge">Socket.prototype.connect</code>)에 중단점을 열심히 찍어서 디버깅을 해 봤고, 함수의 마지막인 아래 부분 이전에서는 에러가 안 터지는 걸 찾았다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">if</span> <span class="p">(</span><span class="nx">pipe</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">validateString</span><span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="dl">'</span><span class="s1">options.path</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">defaultTriggerAsyncIdScope</span><span class="p">(</span>
      <span class="k">this</span><span class="p">[</span><span class="nx">async_id_symbol</span><span class="p">],</span> <span class="nx">internalConnect</span><span class="p">,</span> <span class="k">this</span><span class="p">,</span> <span class="nx">path</span><span class="p">,</span>
    <span class="p">);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">lookupAndConnect</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</code></pre></div></div>

<p>또한 <code class="language-plaintext highlighter-rouge">node/test/parallel/test-net-socket-connect-without-cb.js</code> 테스트 코드에서는 else 쪽으로 분기가 되고, <code class="language-plaintext highlighter-rouge">lookupAndConnect</code>에 전달되는 <code class="language-plaintext highlighter-rouge">options</code> 인자가 테스트 코드의 <code class="language-plaintext highlighter-rouge">client.connect(address);</code>와 같다는 것도 발견했다. 정확히는 <code class="language-plaintext highlighter-rouge">address</code>가 경우에 따라 약간 전처리가 되고 <code class="language-plaintext highlighter-rouge">lookupAndConnect</code>에 전달되는데, 지금의 경우에는 그대로 전달된다.</p>

<p>그래서 <code class="language-plaintext highlighter-rouge">lookupAndConnect</code>에도 중단점을 계속 찍어가면서 에러가 발생하는 부분을 찾아봤다. 이 부분이었다. 정확히는 <code class="language-plaintext highlighter-rouge">lookup</code> 함수에서 에러가 발생한 후 콜백 함수인 <code class="language-plaintext highlighter-rouge">emitLookup</code>에 에러 내용이 전달되고, <code class="language-plaintext highlighter-rouge">process.nextTick</code>으로 throwing을 하는 것 같다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">defaultTriggerAsyncIdScope</span><span class="p">(</span><span class="nb">self</span><span class="p">[</span><span class="nx">async_id_symbol</span><span class="p">],</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">lookup</span><span class="p">(</span><span class="nx">host</span><span class="p">,</span> <span class="nx">dnsopts</span><span class="p">,</span> <span class="kd">function</span> <span class="nx">emitLookup</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">ip</span><span class="p">,</span> <span class="nx">addressType</span><span class="p">)</span> <span class="p">{</span>
      <span class="nb">self</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">lookup</span><span class="dl">'</span><span class="p">,</span> <span class="nx">err</span><span class="p">,</span> <span class="nx">ip</span><span class="p">,</span> <span class="nx">addressType</span><span class="p">,</span> <span class="nx">host</span><span class="p">);</span>

      <span class="c1">// It's possible we were destroyed while looking this up.</span>
      <span class="c1">// XXX it would be great if we could cancel the promise returned by</span>
      <span class="c1">// the look up.</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">self</span><span class="p">.</span><span class="nx">connecting</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>

      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// net.createConnection() creates a net.Socket object and immediately</span>
        <span class="c1">// calls net.Socket.connect() on it (that's us). There are no event</span>
        <span class="c1">// listeners registered yet so defer the error event to the next tick.</span>
        <span class="nx">process</span><span class="p">.</span><span class="nx">nextTick</span><span class="p">(</span><span class="nx">connectErrorNT</span><span class="p">,</span> <span class="nb">self</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span>
      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">isIP</span><span class="p">(</span><span class="nx">ip</span><span class="p">))</span> <span class="p">{</span>
        <span class="nx">err</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ERR_INVALID_IP_ADDRESS</span><span class="p">(</span><span class="nx">ip</span><span class="p">);</span>
        <span class="nx">process</span><span class="p">.</span><span class="nx">nextTick</span><span class="p">(</span><span class="nx">connectErrorNT</span><span class="p">,</span> <span class="nb">self</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span>
      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">addressType</span> <span class="o">!==</span> <span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="nx">addressType</span> <span class="o">!==</span> <span class="mi">6</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">err</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ERR_INVALID_ADDRESS_FAMILY</span><span class="p">(</span><span class="nx">addressType</span><span class="p">,</span>
                                             <span class="nx">options</span><span class="p">.</span><span class="nx">host</span><span class="p">,</span>
                                             <span class="nx">options</span><span class="p">.</span><span class="nx">port</span><span class="p">);</span>
        <span class="nx">process</span><span class="p">.</span><span class="nx">nextTick</span><span class="p">(</span><span class="nx">connectErrorNT</span><span class="p">,</span> <span class="nb">self</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nb">self</span><span class="p">.</span><span class="nx">_unrefTimer</span><span class="p">();</span>
        <span class="nx">defaultTriggerAsyncIdScope</span><span class="p">(</span>
          <span class="nb">self</span><span class="p">[</span><span class="nx">async_id_symbol</span><span class="p">],</span>
          <span class="nx">internalConnect</span><span class="p">,</span>
          <span class="nb">self</span><span class="p">,</span> <span class="nx">ip</span><span class="p">,</span> <span class="nx">port</span><span class="p">,</span> <span class="nx">addressType</span><span class="p">,</span> <span class="nx">localAddress</span><span class="p">,</span> <span class="nx">localPort</span><span class="p">,</span>
        <span class="p">);</span>
      <span class="p">}</span>
    <span class="p">});</span>
  <span class="p">});</span>
</code></pre></div></div>

<p>위의 코드 블럭에서 <code class="language-plaintext highlighter-rouge">lookup</code>에 넘어가는 인자들을 보니까 <code class="language-plaintext highlighter-rouge">host</code>는 <code class="language-plaintext highlighter-rouge">'localhost'</code>였고, <code class="language-plaintext highlighter-rouge">dnsopts</code>에는 IP 버전 정보와 DNS resolver 관련 정보가 들어있었다. 앞서 말했듯 DNS 주소인 <code class="language-plaintext highlighter-rouge">localhost</code>가 IPv6 주소로 resolve되도록 hosts 파일을 설정하지 않아서 저런 인자가 넘어가면 에러가 나는 건 이상하지 않은데, 애초에 <code class="language-plaintext highlighter-rouge">host</code>에 IP 주소 대신 <code class="language-plaintext highlighter-rouge">'localhost'</code>가 들어가는 게 이상하다.</p>

<p>다시 <code class="language-plaintext highlighter-rouge">lookupAndConnect</code> 함수를 전체적으로 살펴봤다. 그리고 <code class="language-plaintext highlighter-rouge">lookupAndConnect</code>에 인자로 넘어간 <code class="language-plaintext highlighter-rouge">options</code>의 <code class="language-plaintext highlighter-rouge">options.address</code> 값을 함수 내부에서 전혀 이용하지 않는 것을 발견했다. 그 대신 <code class="language-plaintext highlighter-rouge">server.address</code>의 리턴값에는 존재하지 않는 값인 <code class="language-plaintext highlighter-rouge">options.host</code>를 사용해서 <code class="language-plaintext highlighter-rouge">lookup</code>에 전달될 <code class="language-plaintext highlighter-rouge">host</code>를 정의하고 있었다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">lookupAndConnect</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">localAddress</span><span class="p">,</span> <span class="nx">localPort</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">options</span><span class="p">;</span>
  <span class="kd">const</span> <span class="nx">host</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">host</span> <span class="o">||</span> <span class="dl">'</span><span class="s1">localhost</span><span class="dl">'</span><span class="p">;</span>
  <span class="kd">let</span> <span class="p">{</span> <span class="nx">port</span><span class="p">,</span> <span class="nx">autoSelectFamilyAttemptTimeout</span><span class="p">,</span> <span class="nx">autoSelectFamily</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">options</span><span class="p">;</span>

  <span class="p">...</span>

<span class="p">}</span>
</code></pre></div></div>

<p>이제 이유는 알아냈으니까 <code class="language-plaintext highlighter-rouge">host</code> 값으로 <code class="language-plaintext highlighter-rouge">options.address</code> <strong>도</strong> 사용할 수 있게 만들자. <code class="language-plaintext highlighter-rouge">host</code> 값으로 <code class="language-plaintext highlighter-rouge">options.host</code>가 사용되는 것을 가정하고 만든 코드도 많을 테니까 위 코드에서 <code class="language-plaintext highlighter-rouge">options.host</code>를 <code class="language-plaintext highlighter-rouge">options.address</code>로 바꿔버리면 안 될 것이다. 대신 <code class="language-plaintext highlighter-rouge">options.host</code>가 존재하지 않을 때만 <code class="language-plaintext highlighter-rouge">options.address</code> 값을 <code class="language-plaintext highlighter-rouge">host</code>로 이용하고, <code class="language-plaintext highlighter-rouge">options.address</code> 값도 없을 때 이전처럼 <code class="language-plaintext highlighter-rouge">host</code>를 <code class="language-plaintext highlighter-rouge">'localhost'</code>로 만들면 될 것이다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">lookupAndConnect</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">localAddress</span><span class="p">,</span> <span class="nx">localPort</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">options</span><span class="p">;</span>
  <span class="kd">let</span> <span class="nx">host</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">host</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">host</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">host</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">address</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">host</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">host</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">localhost</span><span class="dl">'</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="kd">let</span> <span class="p">{</span> <span class="nx">port</span><span class="p">,</span> <span class="nx">autoSelectFamilyAttemptTimeout</span><span class="p">,</span> <span class="nx">autoSelectFamily</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">options</span><span class="p">;</span>

  <span class="p">...</span>

<span class="p">}</span>
</code></pre></div></div>

<p>이러고 다시 bulid 후 test를 돌려보니 처음 고치기로 했던 <code class="language-plaintext highlighter-rouge">test-net-socket-connect-without-cb</code> 뿐만 아니라 <code class="language-plaintext highlighter-rouge">node/test/parallel/test-tcp-wrap-listen.js</code> 까지 고쳐졌고, 새로 발생한 에러는 없어서 모든 test를 통과했다.</p>

<p>이제 GitHub에 Issue랑 PR을 어떻게 올릴 지 좀 알아봐야 될 것 같다.</p>

<p>그나저나 저런 버그가 있으면 <code class="language-plaintext highlighter-rouge">server.address()</code>의 리턴 값 형식으로 서버 주소를 알아왔을 때, localhost가 아닌 서버에 접속하면 항상 에러가 터질 텐데… 이게 어떻게 지금까지 남아있지.</p>]]></content><author><name>sendol</name><email>sendol39@gmail.com</email></author><category term="Others" /><category term="Node.js" /><summary type="html"><![CDATA[일단 저번에 가상환경 밖에서 돌렸을 때 에러가 떴던 테스트의 에러 메세지부터 살펴보자.]]></summary></entry><entry><title type="html">Node.js Build + Test</title><link href="http://localhost:4000/cs-blog/others/Node.js-Build-+-Test/" rel="alternate" type="text/html" title="Node.js Build + Test" /><published>2024-07-16T00:00:00+09:00</published><updated>2024-07-16T00:00:00+09:00</updated><id>http://localhost:4000/cs-blog/others/Node.js-Build-+-Test</id><content type="html" xml:base="http://localhost:4000/cs-blog/others/Node.js-Build-+-Test/"><![CDATA[<h2 id="빌드-환경">빌드 환경</h2>
<h3 id="hw">HW</h3>
<ul>
  <li>Ryzen 5 5600X</li>
  <li>DDR4 48GB</li>
</ul>

<p><a href="https://github.com/nodejs/node/commit/362afa52ebe462a39874915e5e70d261db153c58">text</a></p>

<h3 id="native">Native</h3>
<ul>
  <li>Ubuntu 24.04</li>
  <li>Python 3.12.4</li>
  <li>Make 4.3</li>
  <li>GCC 13.2.0</li>
</ul>

<h3 id="docker-가상환경">Docker 가상환경</h3>

<p><a href="https://github.com/nodejs/devcontainer">text</a> 여기에서 Node.js를 위한 dev container 설정 방법을 알려주고 있다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker pull nodejs/devcontainer:nightly
docker run -it nodejs/devcontainer:nightly /bin/bash
</code></pre></div></div>

<ul>
  <li>Ubuntu 22.04</li>
  <li>Python 3.10.6</li>
  <li>Make 4.3</li>
  <li>GCC 11.3.0</li>
</ul>

<h2 id="빌드-결과">빌드 결과</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>time make -j10
</code></pre></div></div>

<p>빌드 자체에서 에러는 안 떴다. 아래에 있는 빌드 시간은 Docker에서 돌렸을 때의 시간인데, native로 돌렸을 때도 아마 비슷하게 나왔던 것 같다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>real    20m18.848s
user    180m33.354s
sys     16m22.906s
</code></pre></div></div>

<h2 id="테스트-결과">테스트 결과</h2>
<h3 id="native-1">Native</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make test-only
</code></pre></div></div>

<p>Test case 2개에서 에러가 터졌다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>=== release test-net-socket-connect-without-cb ===                            
Path: parallel/test-net-socket-connect-without-cb
node:events:498
      throw er; // Unhandled 'error' event
      ^

Error: getaddrinfo ENOTFOUND localhost
    at GetAddrInfoReqWrap.onlookup [as oncomplete] (node:dns:109:26)
Emitted 'error' event on Socket instance at:
    at emitErrorNT (node:internal/streams/destroy:170:8)
    at emitErrorCloseNT (node:internal/streams/destroy:129:3)
    at process.processTicksAndRejections (node:internal/process/task_queues:82:21) {
  errno: -3007,
  code: 'ENOTFOUND',
  syscall: 'getaddrinfo',
  hostname: 'localhost'
}

Node.js v23.0.0-pre
Command: out/Release/node /home/sendol/programming-projects/node/test/parallel/test-net-socket-connect-without-cb.js


=== release test-tcp-wrap-listen ===                                          
Path: parallel/test-tcp-wrap-listen
(node:377826) internal/test/binding: These APIs are for internal testing only. Do not use them.
(Use `node --trace-warnings ...` to show where the warning was created)
node:events:498
      throw er; // Unhandled 'error' event
      ^

Error: getaddrinfo ENOTFOUND localhost
    at GetAddrInfoReqWrap.onlookup [as oncomplete] (node:dns:109:26)
Emitted 'error' event on Socket instance at:
    at emitErrorNT (node:internal/streams/destroy:170:8)
    at emitErrorCloseNT (node:internal/streams/destroy:129:3)
    at process.processTicksAndRejections (node:internal/process/task_queues:82:21) {
  errno: -3007,
  code: 'ENOTFOUND',
  syscall: 'getaddrinfo',
  hostname: 'localhost'
}

Node.js v23.0.0-pre
Command: out/Release/node --expose-internals /home/sendol/programming-projects/node/test/parallel/test-tcp-wrap-listen.js


[05:18|% 100|+ 4154|-   2]: Done                                              

Failed tests:
out/Release/node /home/sendol/programming-projects/node/test/parallel/test-net-socket-connect-without-cb.js
out/Release/node --expose-internals /home/sendol/programming-projects/node/test/parallel/test-tcp-wrap-listen.js
make[1]: *** [Makefile:312: jstest] 오류 1
make: *** [Makefile:346: test-only] 오류 2
</code></pre></div></div>

<h3 id="docker">Docker</h3>
<p>Docker에서는 모든 test case가 통과했다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[03:50|% 100|+ 3878|-   0]: Done                                              

All tests passed.
make tooltest
.....
----------------------------------------------------------------------
Ran 5 tests in 0.002s

OK

real	5m59.461s
user	10m28.708s
sys	3m12.673s
</code></pre></div></div>]]></content><author><name>sendol</name><email>sendol39@gmail.com</email></author><category term="Others" /><category term="Node.js" /><summary type="html"><![CDATA[빌드 환경 HW Ryzen 5 5600X DDR4 48GB]]></summary></entry><entry><title type="html">PostgreSQL-Basics</title><link href="http://localhost:4000/cs-blog/others/PostgreSQL-Basics/" rel="alternate" type="text/html" title="PostgreSQL-Basics" /><published>2024-05-15T00:00:00+09:00</published><updated>2024-05-15T00:00:00+09:00</updated><id>http://localhost:4000/cs-blog/others/PostgreSQL-Basics</id><content type="html" xml:base="http://localhost:4000/cs-blog/others/PostgreSQL-Basics/"><![CDATA[<p>대충 아래 링크 강의에 나오는 것 정도를 정리했다.</p>

<p>https://www.freecodecamp.org/learn/relational-database/learn-relational-databases-by-building-a-mario-database/build-a-mario-database</p>

<p>DB 접속: <code class="language-plaintext highlighter-rouge">psql --username=$USERNAME --dbname=$DBNAME</code> (bash에서)</p>

<h2 id="psql-명령어">psql 명령어</h2>

<p>앞에 <code class="language-plaintext highlighter-rouge">\</code> 붙어있는 명령어들은 psql에서 사용하는 명령어들이다.</p>
<ul>
  <li>DB list 확인: <code class="language-plaintext highlighter-rouge">\l</code></li>
  <li>특정 DB 접속: <code class="language-plaintext highlighter-rouge">\c &lt;DB_NAME&gt;</code></li>
  <li>특정 DB에 접속한 상태에서 table list 확인: <code class="language-plaintext highlighter-rouge">\d</code>,</li>
  <li>특정 table의 schema 확인: <code class="language-plaintext highlighter-rouge">\d &lt;TABLE_NAME&gt;</code></li>
</ul>

<h2 id="sql-명령어">SQL 명령어</h2>

<p>SQL 쿼리 명령어들 (<code class="language-plaintext highlighter-rouge">CREATE</code>, <code class="language-plaintext highlighter-rouge">SELECT</code>, <code class="language-plaintext highlighter-rouge">INSERT</code>, <code class="language-plaintext highlighter-rouge">UPDATE</code>, <code class="language-plaintext highlighter-rouge">DELETE</code> 등)은 뒤에 세미콜론을 붙여야 한다.</p>

<h3 id="create">CREATE</h3>

<ul>
  <li>DB 생성:<br />
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">DATABASE</span> <span class="o">&lt;</span><span class="n">db_name</span><span class="o">&gt;</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>Table 생성:<br />
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="o">&lt;</span><span class="k">table_name</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">column1</span> <span class="n">datatype</span> <span class="p">[</span><span class="k">constraint</span><span class="p">],</span> <span class="n">column2</span> <span class="n">datatype</span> <span class="p">[</span><span class="k">constraint</span><span class="p">],</span> <span class="p">...);</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="drop">DROP</h3>

<ul>
  <li>Table 삭제:<br />
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">DROP</span> <span class="k">TABLE</span> <span class="o">&lt;</span><span class="k">table_name</span><span class="o">&gt;</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>DB 삭제:<br />
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">DROP</span> <span class="k">DATABASE</span> <span class="o">&lt;</span><span class="n">db_name</span><span class="o">&gt;</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="insert">INSERT</h3>

<ul>
  <li>Tuple 추가:<br />
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">INSERT</span> <span class="k">INTO</span> <span class="o">&lt;</span><span class="k">table_name</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">column1</span><span class="p">,</span> <span class="n">column2</span><span class="p">,</span> <span class="p">...)</span> <span class="k">VALUES</span> <span class="p">(</span><span class="n">value1</span><span class="p">,</span> <span class="n">value2</span><span class="p">,</span> <span class="p">...);</span>
</code></pre></div>    </div>
    <p>한 번에 여러 tuple도 추가할 수 있다.</p>
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">INSERT</span> <span class="k">INTO</span> <span class="o">&lt;</span><span class="k">table_name</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">column1</span><span class="p">,</span> <span class="n">column2</span><span class="p">,</span> <span class="p">...)</span>
<span class="k">VALUES</span>
  <span class="p">(</span><span class="n">value1</span><span class="p">,</span> <span class="n">value2</span><span class="p">,</span> <span class="p">...),</span> 
  <span class="p">(</span><span class="n">value1</span><span class="p">,</span> <span class="n">value2</span><span class="p">,</span> <span class="p">...),</span>
  <span class="p">...;</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="delete">DELETE</h3>

<ul>
  <li>Tuple 삭제:<br />
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">DELETE</span> <span class="k">FROM</span> <span class="o">&lt;</span><span class="k">table_name</span><span class="o">&gt;</span> <span class="k">WHERE</span> <span class="o">&lt;</span><span class="n">condition</span><span class="o">&gt;</span><span class="p">;</span>
</code></pre></div>    </div>
    <ul>
      <li>Equal은 <code class="language-plaintext highlighter-rouge">==</code>가 아니라 <code class="language-plaintext highlighter-rouge">=</code>이다.</li>
    </ul>
  </li>
</ul>

<h3 id="alter">ALTER</h3>

<ul>
  <li>Table 이름 변경:<br />
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="o">&lt;</span><span class="k">table_name</span><span class="o">&gt;</span> <span class="k">RENAME</span> <span class="k">TO</span> <span class="o">&lt;</span><span class="n">new_table_name</span><span class="o">&gt;</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>DB 이름 변경:<br />
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">ALTER</span> <span class="k">DATABASE</span> <span class="o">&lt;</span><span class="n">db_name</span><span class="o">&gt;</span> <span class="k">RENAME</span> <span class="k">TO</span> <span class="o">&lt;</span><span class="n">new_db_name</span><span class="o">&gt;</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>Table scheme 변경:
    <ul>
      <li>Column 추가:<br />
        <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">ALTER</span> <span class="k">TABLE</span> <span class="o">&lt;</span><span class="k">table_name</span><span class="o">&gt;</span> <span class="k">ADD</span> <span class="o">&lt;</span><span class="k">column_name</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">data_type</span><span class="o">&gt;</span> <span class="p">[</span><span class="o">&lt;</span><span class="k">constraint_name</span><span class="o">&gt;</span><span class="p">];</span>
</code></pre></div>        </div>
        <ul>
          <li>외래 키로 추가
            <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">ALTER</span> <span class="k">TABLE</span> <span class="o">&lt;</span><span class="k">table_name</span><span class="o">&gt;</span>
  <span class="k">ADD</span> <span class="k">COLUMN</span> <span class="o">&lt;</span><span class="k">column_name</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">data_type</span><span class="o">&gt;</span>
  <span class="k">REFERENCES</span> <span class="o">&lt;</span><span class="n">another_table_name</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&lt;</span><span class="n">another_column_name</span><span class="o">&gt;</span><span class="p">);</span>
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
      <li>Column 삭제:<br />
        <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">ALTER</span> <span class="k">TABLE</span> <span class="o">&lt;</span><span class="k">table_name</span><span class="o">&gt;</span> <span class="k">DROP</span> <span class="o">&lt;</span><span class="k">column_name</span><span class="o">&gt;</span><span class="p">;</span>
</code></pre></div>        </div>
      </li>
      <li>Column 이름 변경:<br />
        <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">ALTER</span> <span class="k">TABLE</span> <span class="o">&lt;</span><span class="k">table_name</span><span class="o">&gt;</span> <span class="k">RENAME</span> <span class="k">COLUMN</span> <span class="o">&lt;</span><span class="k">column_name</span><span class="o">&gt;</span> <span class="k">TO</span> <span class="o">&lt;</span><span class="n">new_column_name</span><span class="o">&gt;</span><span class="p">;</span>
</code></pre></div>        </div>
      </li>
      <li>Column 타입 변경:<br />
        <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">ALTER</span> <span class="k">TABLE</span> <span class="o">&lt;</span><span class="k">table_name</span><span class="o">&gt;</span> <span class="k">ALTER</span> <span class="k">COLUMN</span> <span class="o">&lt;</span><span class="k">column_name</span><span class="o">&gt;</span> <span class="k">TYPE</span> <span class="o">&lt;</span><span class="n">new_data_type</span><span class="o">&gt;</span><span class="p">;</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>Column에 constraint 추가:<br />
    <ul>
      <li><code class="language-plaintext highlighter-rouge">NOT NULL</code> constraint 추가:<br />
        <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">ALTER</span> <span class="k">TABLE</span> <span class="o">&lt;</span><span class="k">table_name</span><span class="o">&gt;</span> <span class="k">ALTER</span> <span class="k">COLUMN</span> <span class="o">&lt;</span><span class="k">column_name</span><span class="o">&gt;</span> <span class="k">SET</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">;</span>
</code></pre></div>        </div>
      </li>
      <li><code class="language-plaintext highlighter-rouge">UNIQUE</code> constraint 추가:<br />
        <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">ALTER</span> <span class="k">TABLE</span> <span class="o">&lt;</span><span class="k">table_name</span><span class="o">&gt;</span> <span class="k">ADD</span> <span class="k">CONSTRAINT</span> <span class="o">&lt;</span><span class="k">constraint_name</span><span class="o">&gt;</span> <span class="k">UNIQUE</span> <span class="p">(</span><span class="o">&lt;</span><span class="k">column_name</span><span class="o">&gt;</span><span class="p">);</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>특정 Column을 기본 키로 설정:<br />
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="o">&lt;</span><span class="k">table_name</span><span class="o">&gt;</span> <span class="k">ADD</span> <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="o">&lt;</span><span class="k">column_name</span><span class="o">&gt;</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
  <li>특정 Column을 외래 키로 설정:<br />
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="o">&lt;</span><span class="k">table_name</span><span class="o">&gt;</span> <span class="k">ADD</span> <span class="k">FOREIGN</span> <span class="k">KEY</span> <span class="p">(</span><span class="o">&lt;</span><span class="k">column_name</span><span class="o">&gt;</span><span class="p">)</span> <span class="k">REFERENCES</span> <span class="o">&lt;</span><span class="n">another_table_name</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&lt;</span><span class="n">another_column_name</span><span class="o">&gt;</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="update">Update</h3>

<ul>
  <li>Tuple 업데이트:<br />
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">UPDATE</span> <span class="o">&lt;</span><span class="k">table_name</span><span class="o">&gt;</span> <span class="k">SET</span> <span class="n">column1</span> <span class="o">=</span> <span class="n">value1</span><span class="p">,</span> <span class="n">column2</span> <span class="o">=</span> <span class="n">value2</span><span class="p">,</span> <span class="p">...</span> <span class="k">WHERE</span> <span class="o">&lt;</span><span class="n">condition</span><span class="o">&gt;</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="select">SELECT</h3>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">column1</span><span class="p">,</span> <span class="n">column2</span><span class="p">,</span> <span class="p">...</span>
    <span class="k">FROM</span> <span class="o">&lt;</span><span class="k">table_name</span><span class="o">&gt;</span>
    <span class="p">[</span><span class="k">WHERE</span> <span class="o">&lt;</span><span class="n">condition</span><span class="o">&gt;</span><span class="p">]</span>
    <span class="p">[</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">column1</span><span class="p">,</span> <span class="n">column2</span><span class="p">,</span> <span class="p">...</span> <span class="p">[</span><span class="k">ASC</span><span class="o">|</span><span class="k">DESC</span><span class="p">]]</span>
    <span class="p">[</span><span class="k">LIMIT</span> <span class="o">&lt;</span><span class="n">number</span><span class="o">&gt;</span><span class="p">]</span>
    <span class="p">;</span>
</code></pre></div></div>
<p>group by, having, join, 집계 함수, 중첩 쿼리 같은 것 까지 여기서 설명하긴 너무 길다. 다른 글에서 다루려면 join에 포스트 하나, 집계 함수에 포스트 하나, 중첩 쿼리에 포스트 하나 정도 될 것 같긴 한데…</p>

<h3 id="자료형">자료형</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">int</code>: 다 알고 있을 그거</li>
  <li><code class="language-plaintext highlighter-rouge">numeric(precision, scale)</code>: 고정소수점 숫자. precision은 전체 자릿수, scale은 소수점 이하 자릿수</li>
  <li><code class="language-plaintext highlighter-rouge">serial</code>: auto-incrementing integer</li>
  <li><code class="language-plaintext highlighter-rouge">varchar(n)</code>: 최대 n글자의 가변 길이 문자열</li>
  <li><code class="language-plaintext highlighter-rouge">text</code>: 길이 제한 없는 가변 길이 문자열
    <ul>
      <li>문자열은 ‘‘로 감싸야 한다. ““는 table, column 이름 같은 데 사용된다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">boolean</code>: <code class="language-plaintext highlighter-rouge">true</code> 또는 <code class="language-plaintext highlighter-rouge">false</code></li>
  <li><code class="language-plaintext highlighter-rouge">date</code>: 날짜. <code class="language-plaintext highlighter-rouge">YYYY-MM-DD</code> 형식 문자열 직접 입력 가능</li>
</ul>]]></content><author><name>sendol</name><email>sendol39@gmail.com</email></author><category term="Others" /><category term="Database" /><category term="SQL" /><summary type="html"><![CDATA[대충 아래 링크 강의에 나오는 것 정도를 정리했다.]]></summary></entry><entry><title type="html">Ubuntu Destop + Nvidia Gpu 환경에서 듀얼 모니터 설정</title><link href="http://localhost:4000/cs-blog/others/Ubuntu-Destop-+-NVIDIA-GPU-%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C-%EB%93%80%EC%96%BC-%EB%AA%A8%EB%8B%88%ED%84%B0-%EC%84%A4%EC%A0%95/" rel="alternate" type="text/html" title="Ubuntu Destop + Nvidia Gpu 환경에서 듀얼 모니터 설정" /><published>2023-12-30T00:00:00+09:00</published><updated>2023-12-30T00:00:00+09:00</updated><id>http://localhost:4000/cs-blog/others/Ubuntu-Destop-+-NVIDIA-GPU-%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C-%EB%93%80%EC%96%BC-%EB%AA%A8%EB%8B%88%ED%84%B0-%EC%84%A4%EC%A0%95</id><content type="html" xml:base="http://localhost:4000/cs-blog/others/Ubuntu-Destop-+-NVIDIA-GPU-%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C-%EB%93%80%EC%96%BC-%EB%AA%A8%EB%8B%88%ED%84%B0-%EC%84%A4%EC%A0%95/"><![CDATA[<head></head>

<p>나는 좀 특이한 구성으로 듀얼 모니터 환경을 세팅해 놨다. 왼쪽에는 1920*1080 해상도의 서브 모니터를 90도 회전시킨 다음 화면 맨 위쪽까지 쳐다보는 게 불편해서 위아래 일부를 잘라놓은 상태로 1080*1440 해상도로 사용하고 있고, 오른쪽에는 2560*1440 해상도의 메인 모니터를 그나마 평범하게 설치해서 사용하고 있다.</p>

<p>NVIDIA X Server를 잘 만져줘서 설정이 제대로 됐다고 생각하고 대충 잘 쓰고 있다가 재부팅을 해 보니 문제가 발생했다. 로그온 화면에서 메인 모니터가 왼쪽 모니터로 설정이 돼 있는지 왼쪽 모니터에 반대 방향으로 90도 돌아간 로그인화면이 떠 있고, 로그인을 하고 나니 메인 모니터는 제대로 잡혔지만 서브 모니터가 1080*1920 사이즈로 화면을 꽉 채우고 있었다.</p>

<p>나중에 Ubuntu를 재설치하거나 다른 PC에 깔 때 삽질하지 않기 위해서 일단 써 둔다.</p>

<p>일단 GPU 드라이버는 설치됐다고 가정하고 글을 쓰겠다. 설치가 안 되어 있다면 <a href="https://pstudio411.tistory.com/entry/Ubuntu-2004-Nvidia%EB%93%9C%EB%9D%BC%EC%9D%B4%EB%B2%84-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0">이런 글</a>을 참고해서 설치해 주도록 하자.</p>

<ol>
  <li>
    <p>NVIDIA X Server로 설정 변경</p>

    <p>우선 터미널에 <code class="language-plaintext highlighter-rouge">sudo nvidia-settings</code>를 쳐서 X Server를 실행시킨다. 듀얼 모니터의 해상도나 모니터 배치 같은 설정은 왼쪽 메뉴에서 <strong>X Server Display Configuration</strong>을 선택하면 볼 수 있다.</p>

    <p>메인 모니터 설정은, 위쪽에서 메인 모니터로 설정할 모니터를 선택하고 <strong>Make this the primary display for the X screen</strong>을 체크해주면 된다. 모니터를 회전시켜서 사용하는 경우, <strong>Orientation</strong>의 설정을 바꿔주면 된다.</p>

    <p>나처럼 모니터의 일부만 사용할 경우 <strong>Advanced…</strong> 뷰의 <strong>ViewPortIn, ViewPortOut, Panning</strong> 옵션을 사용해야 된다.</p>

    <figure style="text-align: center;">
     <img src="/cs-blog/assets/images/Ubuntu-Destop-+-NVIDIA-GPU-환경에서-듀얼-모니터-설정/nvidia-x-server.png" alt="" style="border: 5px solid #555; text-align: center" />
 </figure>

    <p><strong>ViewPortIn</strong>과 <strong>Panning</strong>에는 모두 출력할 화면의 해상도를 적는다. <strong>ViewPortOut</strong>은 <code class="language-plaintext highlighter-rouge">Xsize</code>x<code class="language-plaintext highlighter-rouge">Ysize</code>+<code class="language-plaintext highlighter-rouge">Xoffset</code>+<code class="language-plaintext highlighter-rouge">Yoffset</code> 형식이다. 모니터를 회전시키지 않은 상태라면 <code class="language-plaintext highlighter-rouge">Xsize</code>x<code class="language-plaintext highlighter-rouge">Ysize</code> 부분에는 ViewPortIn과 Panning에 적은 값을 그대로 적으면 되고, 회전시켰다면 <code class="language-plaintext highlighter-rouge">Xsize</code>와 <code class="language-plaintext highlighter-rouge">Ysize</code>의 순서를 바꿔서 적으면 된다. <code class="language-plaintext highlighter-rouge">Xoffset</code>과 <code class="language-plaintext highlighter-rouge">Yoffset</code>은 화면의 표시 위치를 결정하는 변수이다. 잘 조절해 가면서 자신에게 맞는 값을 설정하면 된다.</p>
  </li>
  <li>
    <p>재부팅 / 다시 로그인 했을 때도 설정 유지</p>

    <p>터미널에 <code class="language-plaintext highlighter-rouge">sudo nvidia-settings</code>를 쳐서 <code class="language-plaintext highlighter-rouge">xorg.conf</code> 파일을 생성한다. 이후 <code class="language-plaintext highlighter-rouge">xorg.conf</code> 파일에서 <strong>“Device”</strong>로 시작하는 블럭을 찾은 후, 아래 내용을 블럭 끝에 붙여넣는다.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> Option "RegistryDwords" "PowerMizerEnable=0x1; PerfLevelSrc=0x3322"
</code></pre></div>    </div>

    <p>(출처: https://askubuntu.com/questions/379483/nvidia-x-server-settings-lost-on-every-reboot)</p>
  </li>
  <li>
    <p>로그인 전 화면에도 설정 적용</p>

    <p>아래 명령어를 터미널에 입력하면 된다. gdm은 그래픽 로그인 화면을 관리하는 특수한 유저라고 생각하면 된다.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> sudo cp ~/.config/monitors.xml ~gdm/.config/monitors.xml
 sudo chown gdm:gdm ~gdm/.config/monitors.xml
</code></pre></div>    </div>

    <p>왜인지는 모르겠지만 이 방법으로 해결했다는 다른 글들을 보면 한 번에 되지 않고 재부팅을 몇 번씩 해가면서 여러 번 시도해야 했다는 얘기가 있다.</p>

    <p>(출처: https://askubuntu.com/questions/1043337/is-there-to-make-the-login-screen-appear-on-the-external-display-in-18-04)</p>
  </li>
</ol>]]></content><author><name>sendol</name><email>sendol39@gmail.com</email></author><category term="Others" /><category term="ubuntu" /><category term="environment-setup" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">레이아웃 수정 To-Do List</title><link href="http://localhost:4000/cs-blog/others/%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83-%EC%88%98%EC%A0%95-to-do-list/" rel="alternate" type="text/html" title="레이아웃 수정 To-Do List" /><published>2023-10-25T00:00:00+09:00</published><updated>2023-10-25T00:00:00+09:00</updated><id>http://localhost:4000/cs-blog/others/%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83-%EC%88%98%EC%A0%95-to-do-list</id><content type="html" xml:base="http://localhost:4000/cs-blog/others/%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83-%EC%88%98%EC%A0%95-to-do-list/"><![CDATA[<head></head>

<h2 id="문제-해결">문제 해결</h2>

<ol>
  <li>
    <p>포스트 페이지 하단의 YOU MAY ALSO ENJOY</p>

    <figure style="width: 80%; margin: auto;">
     <img src="/cs-blog/assets/images/레이아웃-수정-to-do-list/image_1.png" alt="image_1.png" />
 </figure>

    <p>브라우저의 width가 <strong>medium</strong>일 때 문제가 발생한다.</p>

    <p>대충 고쳤다. <code class="language-plaintext highlighter-rouge">_sass/minimal-mistakes/_page.scss</code>에서, <code class="language-plaintext highlighter-rouge">.page__related</code>에 아래 있는 저걸 추가하면 된다.</p>

    <div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">@include</span> <span class="nd">breakpoint</span><span class="p">(</span><span class="nv">$medium</span><span class="p">)</span> <span class="p">{</span>
     <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
 <span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>상단바 메뉴</p>

    <figure style="width: 80%; margin: auto;">
     <img src="/cs-blog/assets/images/레이아웃-수정-to-do-list/image_1.png" alt="image_2.png" />
 </figure>

    <p>엄밀히 말하면 문제는 아닌 것 같지만, 메뉴 전체를 보여줄 수 없을 정도로 브라우저 width가 작다면 그냥 오른쪽 위 더보기 메뉴에 모든 메뉴를 몰아넣을 수 있으면 좋을 것 같다. 솔직히 몬가 좀 불편하다.</p>
  </li>
</ol>

<h2 id="기능-추가">기능 추가</h2>

<h3 id="포스트-기본-스플래시-이미지--미리보기-사진-추가">포스트 기본 스플래시 이미지 / 미리보기 사진 추가</h3>

<h3 id="블로그-배너-추가">블로그 배너 추가</h3>

<h3 id="포스트-목차-추가">포스트 목차 추가</h3>]]></content><author><name>sendol</name><email>sendol39@gmail.com</email></author><category term="Others" /><category term="html" /><category term="css" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Writing HTML Post</title><link href="http://localhost:4000/cs-blog/others/writing-html-post/" rel="alternate" type="text/html" title="Writing HTML Post" /><published>2023-10-24T00:00:00+09:00</published><updated>2023-10-24T00:00:00+09:00</updated><id>http://localhost:4000/cs-blog/others/writing-html-post</id><content type="html" xml:base="http://localhost:4000/cs-blog/others/writing-html-post/"><![CDATA[<head>

</head>
<body>
    Hello, world! <br>
    <code>
        <!DOCTYPE html>
    </code>
</body>]]></content><author><name>sendol</name><email>sendol39@gmail.com</email></author><category term="Others" /><category term="html" /><category term="css" /><summary type="html"><![CDATA[]]></summary></entry></feed>